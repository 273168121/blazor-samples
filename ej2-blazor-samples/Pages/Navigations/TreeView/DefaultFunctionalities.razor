@page "/TreeView/DefaultFunctionalities"

@using Syncfusion.EJ2.RazorComponents.Lists
@using Syncfusion.EJ2.RazorComponents.Navigations

@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Default Functionalities";
    SampleBrowser.CurrentControlName = "TreeView";
    SampleBrowser.CurrentControlCategory = "Navigations";
    SampleBrowser.CurrentControl = SampleBrowser.Config.TreeView;
    SampleBrowser.ActionDescription = new string[] {
        @"<p>
        This sample demonstrates the default functionalities of the TreeView. Click on node to select it, and click on icon or double click on node to expand/collapse it. The child nodes will be loaded on expand the parent node.    </p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>The <code>TreeView</code> component is used to display the data in a hierarchical structure with the configuration options to control the way of data is presented and manipulated. It will pull the data from a data source, such as an array of JSON objects, OData web services, or DataManager binding data fields to the <code>fields</code> property.</p>
    <p>In this demo, the TreeView is populated with its minimum default settings.</p>
    <p>More information on the TreeView instantiation can be found in the <a href='https://ej2.syncfusion.com/documentation/treeview/getting-started/' target='_blank'>documentation section</a>.</p>"
    };
}
@using Syncfusion.EJ2
<div class="control-section">
    <div class="control_wrapper">
        <EjsTreeView id="treedata" fields="@fields">
        </EjsTreeView>
    </div>
</div>

@functions{
    object fields;
    List<Parentitem> parentitem = new List<Parentitem>();
    List<Childitem> childitem1 = new List<Childitem>();
    List<Childitem> childitem2 = new List<Childitem>();
    List<Childitem> childitem3 = new List<Childitem>();
    List<SubChilditem> subchilditem1 = new List<SubChilditem>();
    List<SubChilditem> subchilditem2 = new List<SubChilditem>();
    List<SubChilditem> subchilditem3 = new List<SubChilditem>();
    List<SubChilditem> subchilditem4 = new List<SubChilditem>();
    List<SubChilditem> subchilditem5 = new List<SubChilditem>();
    List<SubChilditem> subchilditem6 = new List<SubChilditem>();
    List<SubChilditem> subchilditem7 = new List<SubChilditem>();
    List<SubChilditem> subchilditem8 = new List<SubChilditem>();
    List<SubChilditem> subchilditem9 = new List<SubChilditem>();

    protected override void OnInit()
    {
        base.OnInit();
        this.parentitem.Add(new Parentitem
        {
            nodeId = "01",
            nodeText = "Local Disk (C:)",
            expanded = true,
            child = childitem1,
        });
        this.childitem1.Add(new Childitem { nodeId = "01-01", nodeText = "Program Files", child = subchilditem1 });
        this.subchilditem1.Add(new SubChilditem { nodeId = "01-01-01", nodeText = "Windows NT" });
        this.subchilditem1.Add(new SubChilditem { nodeId = "01-01-02", nodeText = "Windows Mail" });
        this.subchilditem1.Add(new SubChilditem { nodeId = "01-01-03", nodeText = "Windows Photo Viewer" });
        this.childitem1.Add(new Childitem { nodeId = "01-02", nodeText = "Users", expanded = true, child = subchilditem2 });
        this.subchilditem2.Add(new SubChilditem { nodeId = "01-02-01", nodeText = "Smith" });
        this.subchilditem2.Add(new SubChilditem { nodeId = "01-02-02", nodeText = "Public" });
        this.subchilditem2.Add(new SubChilditem { nodeId = "01-02-03", nodeText = "Admin" });
        this.childitem1.Add(new Childitem { nodeId = "01-03", nodeText = "Windows", child = subchilditem3 });
        this.subchilditem3.Add(new SubChilditem { nodeId = "01-03-01", nodeText = "Boot" });
        this.subchilditem3.Add(new SubChilditem { nodeId = "01-03-02", nodeText = "FileManager" });
        this.subchilditem3.Add(new SubChilditem { nodeId = "01-03-03", nodeText = "System32" });

        this.parentitem.Add(new Parentitem
        {
            nodeId = "02",
            nodeText = "Local Disk (D:)",
            child = childitem2,
        });
        this.childitem2.Add(new Childitem { nodeId = "02-01", nodeText = "Personals", child = subchilditem4 });
        this.subchilditem4.Add(new SubChilditem { nodeId = "02-01-01", nodeText = "My photo.png" });
        this.subchilditem4.Add(new SubChilditem { nodeId = "02-01-02", nodeText = "Rental document.docx" });
        this.subchilditem4.Add(new SubChilditem { nodeId = "02-01-03", nodeText = "Pay slip.pdf" });
        this.childitem2.Add(new Childitem { nodeId = "02-02", nodeText = "Projects", child = subchilditem5 });
        this.subchilditem5.Add(new SubChilditem { nodeId = "02-02-01", nodeText = "ASP Application " });
        this.subchilditem5.Add(new SubChilditem { nodeId = "02-02-02", nodeText = "TypeScript Application" });
        this.subchilditem5.Add(new SubChilditem { nodeId = "02-02-03", nodeText = "React Application" });
        this.childitem2.Add(new Childitem { nodeId = "02-02", nodeText = "Office", child = subchilditem6 });
        this.subchilditem6.Add(new SubChilditem { nodeId = "02-03-01", nodeText = "Work details.docx " });
        this.subchilditem6.Add(new SubChilditem { nodeId = "02-03-02", nodeText = "Weekly report.docx" });
        this.subchilditem6.Add(new SubChilditem { nodeId = "02-03-03", nodeText = "Wish list.csv" });

        this.parentitem.Add(new Parentitem
        {
            nodeId = "03",
            nodeText = "Local Disk (E:)",
            child = childitem3,
        });
        this.childitem3.Add(new Childitem { nodeId = "03-01", nodeText = "Pictures", child = subchilditem7 });
        this.subchilditem7.Add(new SubChilditem { nodeId = "03-01-01", nodeText = "Wind.jpg " });
        this.subchilditem7.Add(new SubChilditem { nodeId = "03-01-02", nodeText = "Stone.jpg" });
        this.subchilditem7.Add(new SubChilditem { nodeId = "03-01-03", nodeText = "Home.jpg" });
        this.childitem3.Add(new Childitem { nodeId = "03-02", nodeText = "Documents", icon = "docx", child = subchilditem8 });
        this.subchilditem8.Add(new SubChilditem { nodeId = "03-02-01", nodeText = "Environment Pollution.docx " });
        this.subchilditem8.Add(new SubChilditem { nodeId = "03-02-02", nodeText = "Global Warming.ppt" });
        this.subchilditem8.Add(new SubChilditem { nodeId = "03-02-03", nodeText = "Social Network.pdf" });
        this.childitem3.Add(new Childitem { nodeId = "03-03", nodeText = "Study Materials", child = subchilditem9 });
        this.subchilditem9.Add(new SubChilditem { nodeId = "03-03-01", nodeText = "UI-Guide.pdf" });
        this.subchilditem9.Add(new SubChilditem { nodeId = "03-03-02", nodeText = "Tutorials.zip" });
        this.subchilditem9.Add(new SubChilditem { nodeId = "03-03-03", nodeText = "TypeScript.7z" });
        this.fields = new
        {
            child = "child",
            dataSource = parentitem,
            id = "nodeId",
            parentId = "pid",
            text = "nodeText",
            hasChildren = "hasChild",
            expanded = "expanded"
        };

    }
    public class Parentitem
    {
        public string nodeId { get; set; }
        public string nodeText { get; set; }
        public string icon { get; set; }
        public bool expanded { get; set; }
        public bool selected { get; set; }
        public List<Childitem> child;

    }
    public class Childitem
    {
        public string nodeId { get; set; }
        public string nodeText { get; set; }
        public string icon { get; set; }
        public bool expanded { get; set; }
        public bool selected { get; set; }
        public List<SubChilditem> child;

    }
    public class SubChilditem
    {
        public string nodeId { get; set; }
        public string nodeText { get; set; }
        public string icon { get; set; }
        public bool expanded { get; set; }
        public bool selected { get; set; }

    }
}

<style>
    .control_wrapper {
        max-width: 500px;
        margin: auto;
        border: 1px solid #dddddd;
        border-radius: 3px;
    }
</style>