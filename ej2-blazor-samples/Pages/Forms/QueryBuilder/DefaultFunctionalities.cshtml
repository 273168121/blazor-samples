@page "/QueryBuilder/DefaultFunctionalities"

@using Syncfusion.EJ2.RazorComponents.QueryBuilder

@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = SampleBrowser.Config.QueryBuilder[0].Name;
    SampleBrowser.CurrentControlName = "QueryBuilder";
    SampleBrowser.CurrentControlCategory = "Forms";
    SampleBrowser.CurrentControl = SampleBrowser.Config.QueryBuilder;
    SampleBrowser.ActionDescription = new string[] {
        @"This sample demonstrates the default functionalities of the Query Builder component. Click the plus button to add a group or conditions."
    };
    SampleBrowser.Description = new string[] {
        @"The Query Builder component is used to create or edit filters. You can edit filters by changing the fields.",
        @"In mobile mode, the component is shown vertically.",
        @"More information about Query Builder can be found in this
            <a target=""_blank"" href=""http://ej2.syncfusion.com/aspnetcore/documentation/query-builder/getting-started"">
                documentation section
            </a>."
    };
}
@*End:Hidden*@

<div class="col-lg-12 control-section">
    <EjsQueryBuilder ID="querybuilder" Width="70%" Columns="@columns" Rule="@rules" DataSource="@dataSource">
    </EjsQueryBuilder>
</div>
<style>
    .e-query-builder {
        margin: 0 auto;
    }
</style>

@functions{

    public List<EmployeeView> dataSource = EmployeeView.GetAllRecords();
    public List<object> columns { get; set; } = new List<object>
    {
        new { field = "EmployeeID", label = "Employee ID", type = "number" },
        new { field = "FirstName", label = "First Name", type = "string" },
        new { field = "TitleOfCourtesy", label ="Title of Courtesy", type = "boolean"},
        new {
            field = "Title",
            label = "Title",
            type = "boolean",
            values = new List<string>{ "Mr.", "Mrs." }
        },
        new { field = "HireDate", label = "Hire Date", type = "date", format = "dd/MM/yyyy"},
        new { field = "Country", label = "Country", type="string"},
        new { field = "City", label = "City", type = "string"}
    };

    object rules { get; set; } = new
    {
        condition = "and",
        rules = new List<object>()
            {
                new { label="Employee ID", field="EmployeeID", type="number", value = 1 },
                new { label="Title", field="Title", type="string", value = "Sales Manager" }
            }
    };
}