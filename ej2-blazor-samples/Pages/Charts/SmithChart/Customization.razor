@page "/SmithChart/Customization"


@using Syncfusion.EJ2.RazorComponents.Charts;
@using Syncfusion.EJ2.RazorComponents.SplitButtons;


@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Customization";
    SampleBrowser.CurrentControlName = "SmithChart";
    SampleBrowser.CurrentControlCategory = "SmithChart";
    SampleBrowser.CurrentControl = SampleBrowser.Config.SmithChart;
     SampleBrowser.ActionDescription = new string[] {
        @" <p>
        This sample visualizes two transmissions in a Smith chart along with 'Data label', 'Marker' and 'Legend' support.
    </p>"
    };
        SampleBrowser.Description = new string[] {
        @"<p>
        In this example, you can see how to render a Smith chart with multiple series. Legend has been enabled to denote the series in Smith chart.
    </p>
    <br />
    <p style=""font-weight: 500"">Injecting Module</p>
    <p>

        Smith chart component features are segregated into individual feature-wise modules. To use a tooltip, inject the <code>Tooltip</code> module using the  < code > SmithChart.Inject(TooltipRender) </ code > method, and use a legend by injecting the <code> Legend</ code > module using the < code > SmithChart.Inject(Legend) </ code > method.


            </ p > "
    };
}
@*End:Hidden*@

<div class="control-section">
    <div>
        <EjsSmithchart ID="smithchart" Series="@series" HorizontalAxis="@horizontalAxis" RadialAxis="radialAxis" LegendSettings="@legendSettings" Title="@title"></EjsSmithchart>
    </div>
</div>

@code {

public object horizontalAxis { get; set; } = new
{
    minorGridLines = new { visible = true }
};
public object radialAxis { get; set; } = new
{
    minorGridLines = new { visible = true }
};
public object legendSettings { get; set; } = new
{
    visible = true,
    shape = "Circle",
    position = "Top"
};
public object title { get; set; } = new
{
    text = "Impedance Transmission",
    enableTrim = true,
    maximumWidth = 200,
    visible = true,
    font = new { size= "16px" }
};
public List<SmithchartSeries> series { get; set; } = new List<SmithchartSeries>() {
new SmithchartSeries() {
EnableAnimation = true,
Name= "Transmission1",
EnableSmartLabels = false,
Fill= "#0F94C4",
Width = 2,
Tooltip= new{ visible= true },
Marker= new {shape= "rectangle",border= new { width= 2 }, visible= true, dataLabel = new { visible = true } },
Points = new List<object>{
    new { resistance= 10, reactance= 25 },
    new { resistance= 8, reactance= 6 },
    new { resistance= 6, reactance= 4.5 },
    new { resistance= 4.5, reactance= 4 },
    new { resistance= 3.5, reactance= 3 },
    new { resistance= 2.5, reactance= 2 },
    new { resistance= 2, reactance= 1.5 },
    new { resistance= 1.5, reactance= 1.25 },
    new { resistance= 1, reactance= 0.9 },
    new { resistance= 0.5, reactance= 0.6 },
    new { resistance= 0.3, reactance= 0.4 },
    new { resistance= 0.001, reactance= 0.15 },
}
},
new SmithchartSeries() {
EnableAnimation = true,
Name= "Transmission2",
EnableSmartLabels = false,
Fill= "#EE0C88",
Width = 2,
Tooltip= new{ visible= true },
Marker= new {shape= "rectangle",border= new { width= 2 }, visible= true, dataLabel = new { visible = true } },
Points = new List<object>{
    new { resistance= 20, reactance= -50 },
    new { resistance= 10, reactance= -10 },
    new { resistance= 9, reactance= -4.5 },
    new { resistance= 8, reactance= -3.5 },
    new { resistance= 7, reactance= -2.5 },
    new { resistance= 6, reactance= -1.5 },
    new { resistance= 5, reactance= -1 },
    new { resistance= 4.5, reactance= -0.8 },
    new { resistance= 3.5, reactance= -0.8 },
    new { resistance= 2.5, reactance= -0.4 },
    new { resistance= 2, reactance= -0.2 },
    new { resistance= 1.5, reactance= 0.001 },
    new { resistance= 1, reactance= 0.1 },
    new { resistance= 0.5, reactance= 0.2 },
    new { resistance= 0.3, reactance= 0.15 },
    new { resistance= 0.001, reactance= 0.05 },
}
},
};

}