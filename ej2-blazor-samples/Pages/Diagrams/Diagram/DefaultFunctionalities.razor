@page "/Diagrams/DefaultFunctionalities"

@using Syncfusion.EJ2.RazorComponents.Diagrams

@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Default Functionalities";
    SampleBrowser.CurrentControlName = "Diagram";
    SampleBrowser.CurrentControlCategory = "Diagram";
    SampleBrowser.CurrentControl = SampleBrowser.Config.Diagram;
    SampleBrowser.ActionDescription = new string[] {
        @" <p>
            This sample visualizes an organizational structure along with an overview for easily navigating the large organizational
            structure using Overview Panel.

        </p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>
            This example shows how to render the Overview Panel and how to display a preview (overall view) of the entire content of
            a diagram. This helps you look at the overall picture of a large diagram and also to navigate (pan or zoom) to a
            particular position of the page. The <code>sourceID</code> property can be used to map the diagram control with Overview Panel.
        </p>
        <br>"
    };
}
@*End:Hidden*@

<div class="control-section">
    <link href="https://ej2.syncfusion.com/javascript/demos/src/diagram/styles/diagram-common.css" rel="stylesheet">
    <div class="sb-mobile-palette-bar">
        <div id="palette-icon" style="float: right;" role="button" class="e-ddb-icons1 e-toggle-palette"></div>
    </div>
    <div id="palette-space" class="sb-mobile-palette">
        <EjsSymbolPalette id="palettes" ref="palettes" Width="100%" Height="700px" SymbolHeight=60 SymbolWidth=60 Palettes="@palette" SymbolMargin="@symbolMargin" ></EjsSymbolPalette>
    </div>
    <div id="diagram-space" class="sb-mobile-diagram">
        <EjsDiagram id="diagram" ref="diagram" Width="100%" Height="690px" Nodes="@nodes"  SnapSettings="@snapSettings" Connectors="@connectors"></EjsDiagram>
    </div>

</div>
 

@functions{
EjsDiagram diagram;
EjsSymbolPalette palettes;

    private static object getFlowShape(string id, string shapeType) {
    return new { id= id, shape = new { type = "Flow", shape = shapeType } };
    }
    private List < object >
    nodes { get; set; } = new List < object >
        {
            new {
                id= "NewIdea", height= 60, width = 145, offsetX= 400 - 50, offsetY= 80,style = new { fill= "#357BD2", strokeColor= "white" },
                shape= new { type= "Flow", shape= "Terminator" }, annotations= new List < object >
                { new { content= "Place Order" , style=  new { color= "white", fill= "transparent" } } }
            },
            new  {
                id= "Meeting", height= 60, width = 145, offsetX= 400 - 50, offsetY= 160,style = new { fill= "#357BD2", strokeColor= "white" },
                shape= new { type= "Flow", shape= "Process" }, annotations=  new List < object >
                {
                    new { content= "Start Transaction", style=  new { color= "white", fill= "transparent" }  }
                }
            },
            new  {
                id= "BoardDecision", height= 60,width = 145,  offsetX= 400 - 50, offsetY= 240,style = new { fill= "#357BD2", strokeColor= "white" },
                shape=new { type= "Flow", shape= "Process" }, annotations=  new List < object >
                {
                    new { content= "Verification" , style=  new { color= "white", fill= "transparent" } }
                }
            },
            new  {
                id= "Project", height= 60, width = 145, offsetX= 400 - 50, offsetY= 330,style = new { fill= "#357BD2", strokeColor= "white" },
                shape= new { type= "Flow", shape= "Decision" }, annotations= new List < object >
                {
                    new { content= "Credit card valid?", style=  new { color= "white", fill= "transparent" }  }
                }
            },
            new  {
                id= "End", height= 60, width = 145, offsetX= 400 - 50, offsetY= 430,style = new { fill= "#357BD2", strokeColor= "white" },
                shape=new { type= "Flow", shape= "Decision" }, annotations=  new List < object >
                {
                    new   { content= "Funds available?", style=  new { color= "white", fill= "transparent" }  }
                }
            },
            new  {
                id= "node11", height= 60,width = 145,  offsetX= (400 - 50) + 230, offsetY= 330,style = new { fill= "#357BD2", strokeColor= "white" },
                shape=new { type= "Flow", shape= "Process" }, annotations=  new List < object >
                {
                    new   { content= "Enter payment method", style=  new { color= "white", fill= "transparent" }  }
                }
            },
            new {
            id= "transaction_entered", width = 145, height= 60, offsetX= (400 - 50), offsetY= 630,style = new { fill= "#357BD2", strokeColor= "white" },
            shape= new{ type= "Flow", shape="Terminator" }, annotations=  new List < object >
            {
            new   { content= "Log transaction", style=  new { color= "white", fill= "transparent" }  }
            }
        },
           new  {
                id= "node12", height= 60, width = 145, offsetX= (400 - 50) + 180, offsetY= 630,style = new { fill= "#357BD2", strokeColor= "white" },
                shape= new { type= "Flow", shape= "Process" }, annotations=  new List < object >
                {
                    new { content= "Reconcile the entries", style=  new { color= "white", fill= "transparent" }  }
                }
            },
            new  {
                id= "transaction_completed", width = 145, height= 60, offsetX= (400 - 50), offsetY= 530,style = new { fill= "#357BD2", strokeColor= "white" },
                shape= new { type= "Flow", shape= "Process" }, annotations=  new List < object >
                {
                    new { content= "Complete Transaction", style=  new { color= "white", fill= "transparent" }  }
                }
            },
            new  {
               id= "Data", height= 45, width = 145, offsetX= (400 - 50) - 190, offsetY= 530,style = new { fill= "#357BD2", strokeColor= "white" },
                shape= new { type= "Flow", shape= "Data" }, annotations=  new List < object >
                {
                    new { content= "Send e-mail", margin= new { left= 25, right= 25 }, style=  new { color= "white", fill= "transparent" }  }
                }
            },
            new  {
                id= "node10", height= 70, width = 145, offsetX= (400 - 50) + 175, offsetY= 530,style = new { fill= "#357BD2", strokeColor= "white" },
                shape= new { type= "Flow", shape= "DirectData" }, annotations=  new List < object >
                {
                    new { content= "Customer Database", margin= new { left= 25, right= 25 }, style=  new { color= "white", fill= "transparent" }  }
                }
            }
        };

private List <object>
    connectors { get; set; } = new List <object>
        {
        new { id= "connector1", sourceID= "NewIdea", targetID= "Meeting" },
        new { id= "connector2", sourceID= "Meeting", targetID= "BoardDecision" },
        new { id= "connector3", sourceID= "BoardDecision", targetID= "Project" },
        new { id= "connector4", sourceID= "Project",
        annotations= new List < object >
        { new{content= "Yes", style= new { fill= "white" } } }, targetID= "End"
        },
        new  { id= "connector5", sourceID= "End",
        annotations= new List < object >
        { new{ content= "Yes", style= new { fill= "white" } } }, targetID= "transaction_completed"
        },
        new { id= "connector6", sourceID= "transaction_completed", targetID= "transaction_entered" },
        new { id= "connector7", sourceID= "transaction_completed", targetID= "Data" },
        new { id= "connector8", sourceID= "transaction_completed", targetID= "node10" },
        new { id= "connector9", sourceID= "node11", type= "Orthogonal", targetID= "Meeting", segments= new List < object >
        { new { direction= "Top", type= "Orthogonal", length= 120 } }
        },
        new {
        id= "connector10", sourceID= "End", type= "Orthogonal", annotations= new List < object >
        { new { content= "No", style= new { fill= "white" } } },
        targetID= "node11", segments= new List < object >
        { new{ direction= "Right", type= "Orthogonal", length= 100 } }
        },
        new { id= "connector11", sourceID= "Project", annotations= new List < object >
        { new { content= "No", style=new { fill= "white" } } }, targetID= "node11"
        },
        new { id= "connector12", style=new { strokeDashArray= "2,2" }, sourceID= "transaction_entered", targetID= "node12" }
        };

        private List <object>
            palette{ get; set; } = new List <object>
    {
    new{id="flow", expanded= true, symbols=  new List < object >
    {
    getFlowShape("Terminator", "Terminator"),
    getFlowShape("Process", "Process"),
    getFlowShape("Decision", "Decision"),
    getFlowShape("Document", "Document"),
    getFlowShape("PreDefinedProcess", "PreDefinedProcess"),
    getFlowShape("PaperTap", "PaperTap"),
    getFlowShape("DirectData", "DirectData"),
    getFlowShape("SequentialData", "SequentialData"),
    getFlowShape("Sort", "Sort"),
    getFlowShape("MultiDocument", "MultiDocument"),
    getFlowShape("Collate", "Collate"),
    getFlowShape("Or", "Or"),
    getFlowShape("Extract", "Extract"),
    getFlowShape("Merge", "Merge"),
    getFlowShape("OffPageReference", "OffPageReference"),
    getFlowShape("SequentialAccessStorage", "SequentialAccessStorage"),
    getFlowShape("Annotation", "Annotation"),
    getFlowShape("Annotation2", "Annotation2"),
    getFlowShape("Data", "Data"),
    getFlowShape("Card", "Card"),
    getFlowShape("Delay", "Delay"),
    }, iconCss= "e-ddb-icons e-flow", title= "Flow Shapes" },
    new {id= "connectors", expanded= true, symbols= new List < object >
    {
    new {
    id= "Link1", type= "Orthogonal", sourcePoint=new { x= 0, y= 0 }, targetPoint= new { x= 60, y= 60 },
    targetDecorator= new { shape= "Arrow" }, style= new { strokeWidth= 1 }
    },
    new  {
    id= "link3", type= "Orthogonal", sourcePoint= new { x= 0, y= 0 }, targetPoint= new { x= 60, y= 60 },
    style= new { strokeWidth= 1 }, targetDecorator= new { shape= "None" }
    },
    new {
    id= "Link21", type= "Straight", sourcePoint= new { x= 0, y= 0 }, targetPoint= new { x= 60, y= 60 },
    targetDecorator= new { shape= "Arrow" }, style= new { strokeWidth= 1 }
    },
    new {
    id= "link23", type= "Straight", sourcePoint= new { x= 0, y= 0 }, targetPoint= new { x= 60, y= 60 },
    style= new { strokeWidth= 1 }, targetDecorator= new { shape= "None" }
    },
    new  {
    id= "link33", type= "Bezier", sourcePoint= new { x= 0, y= 0 }, targetPoint= new { x= 60, y= 60 },
    style= new { strokeWidth= 1 }, targetDecorator= new { shape= "None" }
    }
    }, iconCss= "e-ddb-icons e-connector", title= "Connectors" }
    };

    private object symbolMargin= new { left= 15, right= 15, top= 15, bottom= 15 };
    private object snapSettings = new  {
    horizontalGridlines = new { lineColor = "#e0e0e0",
    lineIntervals = new List<double>
        {
        1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75
        }
        },
        verticalGridlines = new
        {
        lineColor = "#e0e0e0",
        lineIntervals = new List<double>
            {
            1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75
            }
       }
    };
    }

