@page "/Grid/CommandColumn"

@using Syncfusion.EJ2.Blazor.Grids

@*Hidden:Lines*@
@using ej2_blazor_samples
@using ej2_blazor_griddata
@{
    SampleBrowser.CurrentSampleName = "Command Column";
    SampleBrowser.CurrentControlName = "DataGrid";
    SampleBrowser.CurrentControlCategory = "DataGrid";
    SampleBrowser.CurrentControl = SampleBrowser.Config.DataGrid;
    SampleBrowser.ActionDescription = new string[] {
        @"<p>This sample demonstrates CRUD operations in Grid using command column. You can perform CRUD operations as follows,</p>
         <ul>
              <li><code>Edit</code> - To edit record, double click a row or click Edit button from command column after selected a row </li>
              <li><code>Delete</code> - To delete record, click Delete button from command column after selected a row </li>
              <li><code>Update</code>,<code>Cancel</code> - You can save or discard changes by click Update and Cancel button from command column respectively</li>
         </ul>"
    };
    SampleBrowser.Description = new string[]{
        @"<p>
        The Grid provides an option to render CRUD action buttons in a column by using the CommandColumn feature. The
        <code><a target='_blank' class='code'
            href='http://ej2.syncfusion.com/documentation/grid/api-column.html#commands-commandmodel'>columns->commands
            </a></code> property accepts array of <code><a target='_blank' class='code'
                href='http://ej2.syncfusion.com/documentation/grid/api-commandModel.html'>CommandModel
            </a></code> object. The predefined command button can be defined by using <code><a target='_blank' class='code'
                href='http://ej2.syncfusion.com/documentation/grid/api-commandModel.html#type-string'>type
            </a></code> property.
    </p>
    <p>The built-in command button are,</p>
    <ul>
       <li><code>Edit</code></li>
       <li><code>Delete</code></li>
       <li><code>Cancel</code></li>
       <li><code>Save</code></li>
   </ul>"
    };
}
@*End:Hidden*@

@{
    List<object> commands = new List<object>();
    commands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    commands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    commands.Add(new { type = "Save", buttonOption = new { iconCss = "e-icons e-update", cssClass = "e-flat" } });
    commands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });
}

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">

            <EjsGrid ID="Grid" DataSource="@gridData" AllowPaging="true">
                <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(OrdersDetails.OrderID) HeaderText="Order ID" IsPrimaryKey="true" ValidationRules="@(new { required=true, number=true})" TextAlign="@TextAlign.Right" Width="140"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.CustomerID) HeaderText="Customer Name" ValidationRules="@(new { required=true})" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.Freight) HeaderText="Freight" ValidationRules="@(new { required=true})" EditType="numericedit" Format="C2" TextAlign="@TextAlign.Right" Width="140"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.OrderDate) HeaderText="Order Date" EditType="datepickeredit" Format="yMd" Type="date" TextAlign="@TextAlign.Right" Width="160"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.ShipCountry) HeaderText="Ship Country" EditType="dropdownedit" Width="150"></GridColumn>
                    <GridColumn HeaderText="Manage Records" Width="150" Commands="commands"></GridColumn>
                </GridColumns>
            </EjsGrid>

        </div>
    </div>
</div>

@functions{

    public List<OrdersDetails> gridData { get; set; }

    protected override void OnInit()
    {
        gridData = OrdersDetails.GetAllRecords();
    }
}
