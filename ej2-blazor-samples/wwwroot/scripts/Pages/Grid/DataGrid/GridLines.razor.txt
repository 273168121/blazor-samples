@page "/Grid/GridLines"

@using Syncfusion.EJ2.Blazor.Grids
@using Syncfusion.EJ2.Blazor.DropDowns

@*Hidden:Lines*@
@using ej2_blazor_samples
@using ej2_blazor_griddata
@{
    SampleBrowser.CurrentSampleName = "Default Functionalities";
    SampleBrowser.CurrentControlName = "DataGrid";
    SampleBrowser.CurrentControlCategory = "DataGrid";
    SampleBrowser.CurrentControl = SampleBrowser.Config.DataGrid;
    SampleBrowser.ActionDescription = new string[] {
        @"<p>This sample demonstrates visibility of the grid lines that separates the rows and columns. In this sample, you can change
        the gridline from the properties panel.</p>"
    };
    SampleBrowser.Description = new string[]{
        @"<p>
         The <code><a target='_blank' class='code'
        href='http://ej2.syncfusion.com/documentation/grid/api-grid.html#gridlines-gridline'>
        gridLines</a></code> property is used to control the line visibility that separates the rows and columns. 
        The Grid allow us to display the following grid lines,
    </p>
    <ul>
        <li><code>Default</code> - Shows the Horizontal line.</li>
        <li><code>None</code> - Shows no line.</li>
        <li><code>Both</code> - Shows both Horizontal and Vertical lines.</li>
        <li><code>Horizontal</code> - Shows the Horizontal line.</li>
        <li><code>Vertical</code> - Shows the Vertical line.</li>
    </ul>
    <p> In this demo, you can modify the display of gridlines by selecting values in the dropdown.
    </p>
    <p>
        More information on the gridLines configuration can be found in this
        <a target='_blank' 
        href='http://ej2.syncfusion.com/documentation/grid/api-grid.html#gridlines-gridline'>
        documentation section</a>.
    </p>"
    };
}
@*End:Hidden*@

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <EjsGrid id="Grid" DataSource="@gridData" AllowPaging="true">
                <GridColumns>
                    <GridColumn Field=@nameof(OrdersDetails.OrderID) HeaderText="Order ID" IsPrimaryKey="true" TextAlign="@TextAlign.Right" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.CustomerID) HeaderText="Customer ID" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.Freight) HeaderText="Freight" TextAlign="@TextAlign.Right" Width="120" Format="C2"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.ShipCity) HeaderText="Ship City" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.ShipCountry) HeaderText="Ship Country" Width="150"></GridColumn>
                </GridColumns>
            </EjsGrid>

        </div>
    </div>
</div>

@*<div class="col-lg-3 property-section">
    <h4 style="margin-top:28px;">Properties</h4>

    <table id="property" style="width: 73%; height: 58px;">
        <tr>
            <td class="left-side" style="padding-right:15px;">GridLines</td>
            <td>
                <EjsDropDownList ID="games" Index="2" PopupWidth="110px" DataSource="@lines" Change="@onchange">
                    <DropDownListFieldSettings text="id" value="text"></DropDownListFieldSettings>
                </EjsDropDownList>
            </td>
        </tr>
    </table>
</div>*@

@functions{

    public List<OrdersDetails> gridData { get; set; }

    public class Lines
    {
        public string id { get; set; }

        public string text { get; set; }
    }

    List<Lines> lines = new List<Lines>()
    {
        new Lines(){ id= "Default", text= "Default" },
        new Lines(){ id= "Horizontal", text= "Horizontal" },
        new Lines(){ id= "Vertical", text= "Vertical" },
        new Lines(){ id= "Both", text= "Both" },
        new Lines(){ id= "None", text= "None" },
    };

    public void onchange(object args)
    {
        //Fix by core team.
    }

    protected override void OnInit()
    {
        gridData = OrdersDetails.GetAllRecords();
    }
}
