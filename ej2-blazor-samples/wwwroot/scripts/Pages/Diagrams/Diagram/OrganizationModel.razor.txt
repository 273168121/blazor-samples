@page "/Diagrams/OrganizationModel"

@using Syncfusion.EJ2.RazorComponents.Diagrams

@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Organization Chart";
    SampleBrowser.CurrentControlName = "Diagram";
    SampleBrowser.CurrentControlCategory = "Diagram";
    SampleBrowser.CurrentControl = SampleBrowser.Config.Diagram;
    SampleBrowser.ActionDescription = new string[] {
        @"<p>
        This sample illustrates a simple business management structure that is built from an external data source. Hierarchical tree
        layout algorithm is used to build organizational charts. Customizing the orientation and structure of the organizational
        chart is illustrated in this example.


    </p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>
        This example shows how to generate an organizational chart from an external data source. The spacing between the objects can also be customized in the chart. The
        <code>horizontalSpacing</code> and
        <code>verticalSpacing</code> properties of
        <code>layout</code> can be used to customize the space between objects in a tree. The
        <code>layoutOrientation</code> property of
        <code>layout</code> can be used to change the orientation of the chart. The
        <code>getLayoutInfo</code> property of
        <code>layout</code> can be used to customize the tree structure. To change the tree structure, choose any template in the palette.

    </p>"
    };
}
@*End:Hidden*@

<div class="control-section">
    <EjsDiagram id="diagram" ref="diagram" Width="100%" Height="499px" Nodes="@nodes" Connectors="@connectors" SnapSettings="@snapSettings" Tool="@tool" Layout="@layoutSettings"></EjsDiagram>
</div>

@functions{
EjsDiagram diagram;
private static object getFlowShape(string id, string content,string color,string manager) {
    return new { id= id, borderColor = color,backgroundColor = color,width=120,height=50,
    shape = new{ type= "Text"},
    margin = new { left=5, right=5, bottom=5, top=5 },expandIcon =
    new { height= 10, width= 10, shape= "None", fill= "lightgray", offset= new { x= .5, y= 1 },
    verticalAlignment = "Auto",margin = new { left=10, right=10, top=10, bottom=10 }
    },collapseIcon=new {offset = new{ x= .5, y= 1 },verticalAlignment = "Auto",height = 10,width = 10,
    padding=new {top=5},shape = "None",fill = "lightgray"
    },annotations= new List < object >
    { new { content=content ,style=new { color= "white"} ,margin = new { left=10, right=10, top=10, bottom=10 }} },
    data=new {Name=content},
    style = new { fill= color, strokeColor= "none", color= "white", strokeWidth=2 }
};
}
private static object getConnector(string id, string source,string tartget) {
    return new {id= id, sourceID= source, targetID= tartget,targetDecorator= new{shape = "None"},type ="Orthogonal",
    style= new{strokeColor = "#6d6d6d"},constraints = 0,cornerRadius =0
};
}
    private List < object >
    nodes = new List < object >
        {
        getFlowShape("node1","Board","#71AF17",""),
        getFlowShape("node2","General Manager","#71AF17","node1"),
        getFlowShape("node4","Human Resource Manager","#1859B7","node2"),
        getFlowShape("node5","Trainers","#2E95D8","node4"),
        getFlowShape("node6","Recruiting Team","#2E95D8","node4"),
        getFlowShape("node18","Finance Asst. Manager","#2E95D8","node4"),
        getFlowShape("node7","Design Manager","#1859B7","node2"),
        getFlowShape("node8","Design Supervisor","#2E95D8","node7"),
        getFlowShape("node9","Development Supervisor","#2E95D8","node7"),
        getFlowShape("node10","Drafting Supervisor","#2E95D8","node7"),
        getFlowShape("node19","Operations Manager","#1859B7","node2"),
        getFlowShape("node11","Statistics Department","#2E95D8","node18"),
        getFlowShape("node12","Logistics Department","#2E95D8","node18"),
        getFlowShape("node13","Marketing Manager","#1859B7","node2"),
        getFlowShape("node14","Overseas Sales Manager","#2E95D8","node13"),
        getFlowShape("node15","Petroleum Manager","#2E95D8","node13"),
        getFlowShape("node16","Service Department Manager","#2E95D8","node13"),
        getFlowShape("node17","Quality Control Department","#2E95D8","node13")
        };

private List < object > connectors { get; set; } = new List < object >
    {
       getConnector("connector1","node1","node2"),
       getConnector("connector3","node2","node4"),
       getConnector("connector4","node2","node7"),
       getConnector("connector5","node2","node19"),
       getConnector("connector6","node2","node13"),
       getConnector("connector7","node4","node5"),
       getConnector("connector8","node4","node6"),
       getConnector("connector9","node4","node18"),
       getConnector("connector10","node7","node8"),
       getConnector("connector11","node7","node9"),
       getConnector("connector12","node7","node10"),
       getConnector("connector13","node19","node11"),
       getConnector("connector14","node19","node12"),
       getConnector("connector15","node13","node14"),
       getConnector("connector16","node13","node15"),
       getConnector("connector17","node13","node16"),
       getConnector("connector18","node13","node17")
    };

private object layoutSettings { get; set; } = new {
            type="OrganizationalChart"
        };

private object snapSettings { get; set; } = new {  constraints= "SnapConstraints.None" };

private DiagramTools tool= DiagramTools.ZoomPan;

}