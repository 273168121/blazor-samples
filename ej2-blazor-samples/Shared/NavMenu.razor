@using ej2_blazor_samples
@using ej2_blazor_samples.Shared
@using Newtonsoft.Json
@using Syncfusion.EJ2.RazorComponents.Lists
@using Syncfusion.EJ2.RazorComponents.Navigations
@using System.Reflection
@using Microsoft.AspNetCore.Components

@inject Microsoft.AspNetCore.Components.IUriHelper UriHelper
@inject IJSRuntime JsRuntime;



@*<div id="controlTree" class='e-view'></div>*@
<EjsTreeView ID="controlTree" Fields="@DataSource" CssClass="@treeviewClass" FullRowSelect="true" ExpandOn="@ExpandOnSettings.Click" NodeSelected="@onNodeClick" @ref="treeView"></EjsTreeView>


<div id="controlSamples" class="time-duration">
    <div id="sb-left-back1" class="back" role="button" tabindex="0" @onclick="@toggle">
        <div class="e-icons sb-icons back-icon"></div>
        <div class='control-name'>All Controls</div>
    </div>
    <EjsListView id="controlList" CssClass="e-view sb-control-list-top" DataSource="@ListDataSource" Fields="@ListFields" @ref="controlList" Select="@OnSampleSelect"></EjsListView>
</div>
<div>
</div>


@code{

    EjsListView controlList;

    EjsTreeView treeView;


    private string treeviewClass { get; set; } = "e-view time-duration trans-left";

    string listviewClass = "";

    Object DataSource = new
    {
        dataSource = SampleBrowser.SampleList.GroupBy(u => u.Category).Select(g =>
        {
            List<SampleList>
    lst = g.ToList();
            lst.OrderBy(ob => ob.Order);
            lst.ForEach(sam =>
        {
        sam.Samples.ForEach(curSam =>
    {
        SampleBrowser.SampleUrls.Add(curSam.Url);
    });
    });
            return new { dataSource = lst, Name = lst[0].Category, UID = g.Key, expanded = true };
        }),
        id = "UID",
        text = "Name",
        child = "dataSource"
    };


    private void onNodeClick(object arg)
    {
        //JsRuntime.InvokeAsync<Object>("test", arg);
        string adc = JsonConvert.SerializeObject(arg);
        TreeViewEventModel data = JsonConvert.DeserializeObject<TreeViewEventModel>
            (adc, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
        if (data.nodeData.parentID != null)
        {
            SampleBrowser.CurrentControl = SampleBrowser.Config.GetType().GetProperty(data.nodeData.text).GetValue(SampleBrowser.Config) as List<Sample>;
            this.ListDataSource = SampleBrowser.CurrentControl;
            this.StateHasChanged();
            this.controlList.Refresh();
            toggle();
        }
    }

    public void toggle()
    {
        JsRuntime.InvokeAsync<Object>
            ("viewSwitch");
        if (this.treeView.CssClass != "e-view time-duration")
        {
            this.treeView.CssClass = "e-view time-duration";
            this.treeView.DataBind();
        }
    }

    public void OnSampleSelect(Syncfusion.EJ2.RazorComponents.Lists.SelectEventArgs arg)
    {

        string ad = JsonConvert.SerializeObject(arg);
        ListViewEvent data = JsonConvert.DeserializeObject<ListViewEvent>
            (ad, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
        List<string>
            ls = new List<string>
                ();
        List<string>
            ls1 = new List<string>
                ();
        if (SampleBrowser.CurrentUrl != data.data.Url)
        {
            if (SampleBrowser.ActionDescription != null)
            {
                foreach (string element1 in SampleBrowser.ActionDescription)
                {
                    ls.Add(element1);
                }
                JsRuntime.InvokeAsync<Object>
                    ("updateActionDescription", ls);
            }
            else
            {
                JsRuntime.InvokeAsync<Object>
                    ("updateActionDescription", new List<string>
                        ());
            }
            if (SampleBrowser.Description != null)
            {
                foreach (string element in SampleBrowser.Description)
                {
                    ls1.Add(element);
                }
                JsRuntime.InvokeAsync<Object>
                    ("updateDescription", ls1);
            }
            else
            {
                JsRuntime.InvokeAsync<Object>
                    ("updateDescription", new List<string>
                        ());
            }

            JsRuntime.InvokeAsync<Object>
                ("destroyControl", new List<string>
                    ());

            var temp = JsRuntime.InvokeAsync<Object>
        ("persistURL", data.data, new List<string>
            ());

            UriHelper.NavigateTo(data.data.Url);
            SampleBrowser.CurrentUrl = data.data.Url;

        }
    }


    [Parameter]
    private object ListDataSource { get; set; }

    protected override void OnAfterRender()
    {
        ListDataSource = this.controlList.DataSource = SampleBrowser.CurrentControl;
        this.controlList.DataBind();
        SampleBrowser.CurrentControl.ForEach(f =>
        {
            if (f.Name == SampleBrowser.CurrentSampleName)
            {
                SampleBrowser.CurrentUrl = f.Url;
            }
        });
    }

    object ListFields = new
    {
        id = "UID",
        groupBy = "Category",
        text = "Name",
        sortBy = "Order"
    };

}
