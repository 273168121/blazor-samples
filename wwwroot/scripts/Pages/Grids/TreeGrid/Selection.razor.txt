@page "/TreeGrid/Selection"

@using Syncfusion.EJ2.Blazor.TreeGrid
@using Syncfusion.EJ2.Blazor.Grids
@using Syncfusion.EJ2.Blazor.Data
@using Syncfusion.EJ2.Blazor.DropDowns
@using Syncfusion.EJ2.Blazor


@*Hidden:Lines*@
@using ej2_blazor_samples
@using ej2_blazor_treedata

@{
    SampleBrowser.CurrentSampleName = "Selection";
    SampleBrowser.CurrentControlName = "TreeGrid";
    SampleBrowser.CurrentControlCategory = "TreeGrid";
    SampleBrowser.CurrentControl = SampleBrowser.Config.TreeGrid;
    SampleBrowser.ActionDescription = new string[] {
        @"<p>
            This sample demonstrates the default rendering of the TreeGrid with minimum configuration.
        </p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>
            The TreeGrid is used to represent the hierarchical data in a tabular format, combining the visual representation of Grid and TreeView controls.
            It represents the data from datasource such as an array of JSON objects, OData web services, or DataManager binding data fields to columns or self-referential datasource.
        </p>
        <p>
            In this demo, the TreeGrid is populated with its minimum default settings.
        </p>
        <br>

        <p>
            More information on the TreeGrid instantiation can be found in this documentation section.
        </p>"
    };
}
@*End:Hidden*@

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <EjsTreeGrid ID="TreeGrid" DataSource="@treedata" IdMapping="TaskID" ParentIdMapping="ParentID" TreeColumnIndex="1" AllowPaging="true" AllowSelection="true">
                <TreeGridPageSettings PageSize="1"></TreeGridPageSettings>
                <TreeGridColumns>
                    <TreeGridColumn Field="TaskID" HeaderText="Task ID" Width="60" TextAlign="@TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="TaskName" HeaderText="Task Name" Width="90"></TreeGridColumn>
                    <TreeGridColumn Field="StartDate" HeaderText=" Start Date" Format="yMd" Type="date" Width="90" TextAlign="@TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="EndDate" HeaderText="End Date" Format="yMd" Type="date" Width="90" TextAlign="@TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="Duration" HeaderText="Duration" Width="80" TextAlign="@TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="Progress" HeaderText="Progress" Width="80"></TreeGridColumn>
                </TreeGridColumns>
            </EjsTreeGrid>

        </div>
    </div>
</div>

@*<div class="col-lg-3 property-section">
    <h4 style="margin-top:38px;">Properties</h4>

    <table id="property" style="width: 73%; height: 105px;">
        <tr>
            <td class="left-side" style="padding-right:15px;">Selection Type</td>
            <td>
                <EjsDropDownList ID="types" Index="0" PopupWidth="110px" DataSource="@types" Change="@onchange">
                    <DropDownListFieldSettings text="id" value="type"></DropDownListFieldSettings>
                </EjsDropDownList>
            </td>
        </tr>

        <tr>
            <td class="left-side" style="padding-right:15px;">Selection Mode</td>
            <td>
                <EjsDropDownList ID="modes" Index="0" PopupWidth="110px" DataSource="@lines" Change="@modechange">
                    <DropDownListFieldSettings text="id" value="mode"></DropDownListFieldSettings>
                </EjsDropDownList>
            </td>
        </tr>
    </table>
</div>*@

@functions{

    EjsTreeGrid treeGrid;

    public class Modes
    {
        public string id { get; set; }

        public string mode { get; set; }
    }

    public class CellModes
    {
        public string id { get; set; }

        public string mode { get; set; }
    }

    public class SelectionType
    {
        public string id { get; set; }

        public string type { get; set; }
    }

    List<CellModes> cellmode = new List<CellModes>()
    {
        new CellModes(){ id= "Flow", mode= "Flow" },
        new CellModes(){ id= "Box", mode= "Box" },
    };

    List<Modes> lines = new List<Modes>()
    {
        new Modes(){ id= "Row", mode= "Row" },
        new Modes(){ id= "Cell", mode= "Cell" },
    };

    List<SelectionType> types = new List<SelectionType>()
    {
        new SelectionType(){ id= "Single", type= "Single" },
        new SelectionType(){ id= "Multiple", type= "Multiple" },
    };

    public void onchange(object args)
    {
        //Fix by core team.
    }

    public void modechange(object args)
    {
        //Fix by core team.
    }

    public List<SelfReferenceData> treedata { get; set; }

    protected override void OnInit()
    {
        this.treedata = SelfReferenceData.GetTree().ToList();
    }
}
