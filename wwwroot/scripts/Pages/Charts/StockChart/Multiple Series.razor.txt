@page "/StockChart/MultipleSeries"
@using Syncfusion.EJ2.Blazor.Charts

@{
    SampleBrowser.CurrentSampleName = "Multiple Series";
    SampleBrowser.CurrentControlName = "StockChart";
    SampleBrowser.CurrentControlCategory = "StockChart";
    SampleBrowser.CurrentControl = SampleBrowser.Config.StockChart;
    SampleBrowser.ActionDescription = new string[] {
         @"<p>
       This sample visualizes stock chart with multiple series.
    </p>"
    };
    SampleBrowser.Description = new string[] {
         @"<p>
        In this example, you can see how to render and configure the Stock chart. LineSeries is used to represent selected data value.
    </p>"
    };
}

@inject HttpClient Http

@if (dataSource == null)
{
    <div class="stockchartloader"></div>
}
else
{
<EjsStockChart Title="Multiple Series">
    <StockChartBorder Width="0">
    </StockChartBorder>
    <StockChartPrimaryXAxis>
        <StockChartAxisMajorGridLines Width="0"></StockChartAxisMajorGridLines>
        <StockChartAxisCrosshairTooltip enable="true"></StockChartAxisCrosshairTooltip>
    </StockChartPrimaryXAxis>
    <StockChartPrimaryYAxis Interval="40">
        <StockChartAxisLineStyle Color="Transparent"></StockChartAxisLineStyle>
        <StockChartAxisMajorTickLines Width="0" Color="Transparent"></StockChartAxisMajorTickLines>
        <StockChartAxisCrosshairTooltip enable="true"></StockChartAxisCrosshairTooltip>
    </StockChartPrimaryYAxis>
    <StockChartSeriesCollection>
        <StockChartSeries DataSource="@dataSource" Type="ChartSeriesType.Line" xName="x" yName="close" name="Apple"></StockChartSeries>
        <StockChartSeries DataSource="@dataSource2" Type="ChartSeriesType.Line" xName="x" yName="close" name="Google"></StockChartSeries>
    </StockChartSeriesCollection>
    <ChartAreaBorder Width="0"></ChartAreaBorder>
</EjsStockChart>
}
@code{

    ChartData[] dataSource;
    ChartData[] dataSource2;
    protected override async Task OnInitAsync()
    {
        dataSource = await Http.GetJsonAsync<ChartData[]>("scripts/StockChartData/goog.json");
        dataSource2 = await Http.GetJsonAsync<ChartData[]>("scripts/StockChartData/googl.json");
    }
    class ChartData
    {
        public DateTime x { get; set; }
        public double open { get; set; }
        public double low { get; set; }
        public double close { get; set; }
        public double high { get; set; }
        public double volume { get; set; }
    }

}