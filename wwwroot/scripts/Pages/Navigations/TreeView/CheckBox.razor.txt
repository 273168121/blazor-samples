@page "/TreeView/CheckBox"

@using Syncfusion.EJ2.Blazor.Lists
@using Syncfusion.EJ2.Blazor.Navigations

@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "CheckBox";
    SampleBrowser.CurrentControlName = "TreeView";
    SampleBrowser.CurrentControlCategory = "Navigations";
    SampleBrowser.CurrentControl = SampleBrowser.Config.TreeView;
    SampleBrowser.ActionDescription = new string[] {
        @"<p>
        This sample demonstrates the CheckBox functionalities of the TreeView. Click on any parent node's CheckBox to check/uncheck the node and its child nodes. The parent node's checked state will be determined by its child nodes checked state.
    </p>"
    };
    SampleBrowser.Description = new string[] {
        @" <p>The <code>TreeView</code> component can be rendered with checkbox on the left side of each tree node. This allows the user to check more than one nodes, and this can be enabled by the <code>showCheckBox</code> property.</p>
    <p>In this demo, the TreeView is populated with checkbox enabled.</p>
    <p>For more information, you can refer to the <a href='https://ej2.syncfusion.com/aspnet-core-blazor/documentation/treeview/getting-started/' target='_blank'>Checkboxes</a> section from the documentation.</p>"
    };
}
@*End:Hidden*@
@using Syncfusion.EJ2
<div class="control-section">
    <div class="control_wrapper">
        <EjsTreeView TValue="Parentitem" ShowCheckBox="true">
            <TreeViewFieldsSettings TValue="Parentitem" DataSource="@parentitem" Id="id" Text="name" Expanded="expanded" Child="@child"></TreeViewFieldsSettings>
        </EjsTreeView>
    </div>
</div>
@code{
    private object child;
    private List<object> treedata = new List<object>();
    private List<Parentitem> parentitem = new List<Parentitem>();
    private List<Childitem> childitem1 = new List<Childitem>();
    private List<Childitem> childitem2 = new List<Childitem>();
    private List<Childitem> childitem3 = new List<Childitem>();
    private List<Childitem> childitem4 = new List<Childitem>();
    private List<Childitem> childitem5 = new List<Childitem>();
    protected override void OnInit()
    {
        base.OnInit();
        this.parentitem.Add(new Parentitem
        {
            id = 1,
            name = "Australia",
            expanded = true,
            child = childitem1
        });
        this.childitem1.Add(new Childitem
        {
            id = 2,
            name = "New South Wales",

        });
        this.childitem1.Add(new Childitem
        {
            id = 3,
            name = "Victoria"
        });

        this.childitem1.Add(new Childitem
        {
            id = 4,
            name = "South Australia"
        });
        this.childitem1.Add(new Childitem
        {
            id = 6,
            name = "Western Australia",

        });
        this.parentitem.Add(new Parentitem
        {
            id = 7,
            name = "Brazil",
            child = childitem2
        });
        this.childitem2.Add(new Childitem
        {
            id = 8,
            name = "Paraná"
        });
        this.childitem2.Add(new Childitem
        {
            id = 9,
            name = "Ceará"
        });
        this.childitem2.Add(new Childitem
        {
            id = 10,
            name = "Acre"
        });
        this.parentitem.Add(new Parentitem
        {
            id = 11,
            name = "China",
            child = childitem3
        });
        this.childitem3.Add(new Childitem
        {
            id = 12,
            name = "Guangzhou"
        });
        this.childitem3.Add(new Childitem
        {
            id = 13,
            name = "Shanghai"
        });
        this.childitem3.Add(new Childitem
        {
            id = 14,
            name = "Beijing"
        });
        this.childitem3.Add(new Childitem
        {
            id = 15,
            name = "Shantou"

        });
        this.parentitem.Add(new Parentitem
        {
            id = 16,
            name = "France",
            child = childitem4

        });
        this.childitem4.Add(new Childitem
        {
            id = 17,
            name = "Pays de la Loire"

        });
        this.childitem4.Add(new Childitem
        {
            id = 18,
            name = "Aquitaine"

        });
        this.childitem4.Add(new Childitem
        {
            id = 19,
            name = "Brittany"

        });
        this.childitem4.Add(new Childitem
        {
            id = 20,
            name = "Lorraine"
        });
        this.parentitem.Add(new Parentitem
        {
            id = 21,
            name = "India",
            child = childitem5

        });
        this.childitem5.Add(new Childitem
        {
            id = 22,
            name = "Assam"

        });
        this.childitem5.Add(new Childitem
        {
            id = 23,
            name = "Bihar"
        });
        this.childitem5.Add(new Childitem
        {
            id = 24,
            name = "Tamil Nadu"

        });
        this.child = "child";

    }
    public class Parentitem
    {
        public int id { get; set; }
        public string name { get; set; }
        public bool hasChild { get; set; }
        public bool expanded { get; set; }
        public List<Childitem> child;

    }
    public class Childitem
    {
        public int id { get; set; }
        public int pid { get; set; }
        public string name { get; set; }

    }
}

<style>
    .control_wrapper {
        max-width: 500px;
        margin: auto;
        border: 1px solid #dddddd;
        border-radius: 3px;
    }
</style>
