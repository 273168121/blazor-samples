@page "/Slider/Tooltip"

@using Syncfusion.EJ2.Blazor.Inputs;
@using Syncfusion.EJ2.Blazor.DropDowns;
@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Tooltip";
    SampleBrowser.CurrentControlName = "Slider";
    SampleBrowser.CurrentControlCategory = "Inputs";
    SampleBrowser.CurrentControl = SampleBrowser.Config.Slider;
    SampleBrowser.ActionDescription = new string[] {
        @"<p>
        This sample demonstrates the rendering of Slider component with tooltip. Drag the thumb over the bar for selecting the values between min and max to enable the tooltip.
    </p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>
        <p>Slider component displays the tooltip to indicate the current value to the user.</p>

        <p>In this demo, we have demonstrated Tooltip with Default and Range Slider.</p>

        <p>Buttons can be used to increment or decrement the slider value. Buttons can be enabled in Slider using showButtons property</p>

        <p>Tooltip position and opening behavior can be customized through the placement and showOn properties from property pane.</p>

        <p>The dragInterval is used to drag both handles using the range bar which is also applicable only to the range slider.</p>
        </p>"
    };

}
@*End:Hidden*@

<div class="control-section">
    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="sliderwrap">
                <label class="userselect">Default Slider</label>
                <EJSSlider ID="default" Value="30" ShowButtons="true">
                    <SliderTooltipData IsVisible="true" ShowOn="@currentShowOn" Placement="@currentPalacement"></SliderTooltipData>
                </EJSSlider>
            </div>
            <div class="sliderwrap">
                <label class="userselect">Range Slider</label>
                <EJSSlider ID="range" Type=SliderType.Range Value="@val" ShowButtons="true">
                    <SliderTooltipData IsVisible="true" ShowOn="@currentShowOn" Placement="@currentPalacement"></SliderTooltipData>
                </EJSSlider>
            </div>
        </div>
    </div>

    <div class="col-lg-4 property-section" style="display: none">
        <div class="property-panel-section">
            <div class="property-panel-header">Properties</div>
            <div class="property-panel-content">
                <table id="property" title="Properties" class="property-panel-table">
                    <tbody>
                        <tr>
                            <td style="width: 50%">
                                <div class="userselect">Placement</div>
                            </td>
                            <td style="width: 50%;padding-right: 10px">
                                <div>
                                    <Ejsdropdownlist ID="placement" Placeholder="Tooltip position" DataSource="@placement" PopupHeight="200" Change="@onPlacementChange">
                                    </Ejsdropdownlist>
                                </div>
                            </td>
                        </tr>

                        <tr id="slider-showon">
                            <td style="width: 50%">
                                <div class="userselect">ShowOn</div>
                            </td>
                            <td style="width: 50%;padding-right: 10px">
                                <div>
                                    <Ejsdropdownlist ID="showOn" DataSource="@showON" PopupHeight="200" Change="@onShowOnChange">
                                    </Ejsdropdownlist>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


@code{
    int[] val = { 30, 70 };
    List<object> placement = new List<object>();
    List<object> showON = new List<object>();

    Dictionary<string, TooltipPlacement> PlacementTypes = new Dictionary<string, TooltipPlacement>();
    Dictionary<string, TooltipShowOn> ShowOnTypes = new Dictionary<string, TooltipShowOn>();

    TooltipShowOn currentShowOn = TooltipShowOn.Focus;
    TooltipPlacement currentPalacement = TooltipPlacement.Before;

    protected override void OnInit()
    {
        base.OnInit();
        this.placement.Add(new { value = "Before", text = "Before" });
        this.placement.Add(new { value = "After", text = "After" });

        PlacementTypes.Add("Before", TooltipPlacement.Before);
        PlacementTypes.Add("After", TooltipPlacement.After);

        this.showON.Add(new { value = "Auto", text = "Auto" });
        this.showON.Add(new { value = "Focus", text = "Focus" });
        this.showON.Add(new { value = "Hover", text = "Hover" });
        this.showON.Add(new { value = "Always", text = "Always" });

        ShowOnTypes.Add("Auto", TooltipShowOn.Auto);
        ShowOnTypes.Add("Focus", TooltipShowOn.Focus);
        ShowOnTypes.Add("Hover", TooltipShowOn.Hover);
        ShowOnTypes.Add("Always", TooltipShowOn.Always);
    }

    void onPlacementChange(Syncfusion.EJ2.Blazor.DropDowns.ChangeEventArgs args)
    {
        PlacementTypes.TryGetValue(args.Value.ToString(), out currentPalacement);
        this.StateHasChanged();
    }

    void onShowOnChange(Syncfusion.EJ2.Blazor.DropDowns.ChangeEventArgs args)
    {
        ShowOnTypes.TryGetValue(args.Value.ToString(), out currentShowOn);
        this.StateHasChanged();
    }
}
<style>


    .material #property tr#slider-showon {
        display: none;
    }

    .content-wrapper {
        width: 52%;
        margin: 0 auto;
        min-width: 185px;
    }

    .sliderwrap {
        margin-top: 45px;
        margin-left: -20%;
    }

        .sliderwrap label {
            padding-bottom: 26px;
            font-size: 13px;
            font-weight: 500;
            margin-top: 15px;
        }

    .userselect {
        -webkit-user-select: none; /* Safari 3.1+ */
        -moz-user-select: none; /* Firefox 2+ */
        -ms-user-select: none; /* IE 10+ */
        user-select: none; /* Standard syntax */
    }
</style>
