@page "/LinearGauge/Ranges"

@using Syncfusion.EJ2.Blazor.LinearGauge
@using Syncfusion.EJ2.Blazor.DropDowns
@using Newtonsoft.Json;

@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Ranges";
    SampleBrowser.CurrentControlName = "LinearGauge";
    SampleBrowser.CurrentControlCategory = "LinearGauge";
    SampleBrowser.CurrentControl = SampleBrowser.Config.LinearGauge;
    SampleBrowser.ActionDescription = new string[] {
        @" <p>
            This sample illustrates how to highlight a region in an axis by using ranges in gauge. Start, end, color, and width of the range can be changed by using the options provided in the property panel.
        </p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>
            In this example, you can see how to render and configure the ranges in linear gauge. You can use <code>start</code>,
        <code>end</code>, <code>startWidth</code>, <code>endWidth</code> and <code>position</code> properties to customize the ranges. You can also specify various colors for the ranges in the axis. If you enable
        the <code>useRangeColor</code> property, then the axis labels will be displayed based on its range color.

        </p>
        <br>
        <p>
           More information about linear gauge can be found in this
            <a target=""_blank"" href=""http://ej2.syncfusion.com/documentation"">documentation section</a>.

        </p>"
    };
}
@*End:Hidden*@

<div class="col-lg-9 control-section" >
    <div style="margin-top:-30px">
        <EjsLinearGauge ID="gauge" Orientation="Orientation.Horizontal" Height="200px">
            <LinearGaugeAxes>
                <LinearGaugeAxis>
                    <LinearGaugeLine Width="@lineWidth"></LinearGaugeLine>
                    <LinearGaugeLabel Offset="48" Format="{value}%" UseRangeColor="@rangeColor">
                    </LinearGaugeLabel>
                    <LinearGaugeMajorTicks Height="0">
                    </LinearGaugeMajorTicks>
                    <LinearGaugeMinorTicks Height="0">
                    </LinearGaugeMinorTicks>
                    <LinearGaugeAnnotations>
                        <LinearGaugeAnnotation Content="<div id='pointer' style='width:20px'><h1 style='font-size:18px;'>35</h1></div>"
                                               AxisIndex="0" AxisValue="35" Y="-50" ZIndex="1">
                        </LinearGaugeAnnotation>
                    </LinearGaugeAnnotations>
                    <LinearGaugePointers>
                        <LinearGaugePointer Value="35" Height="10" Width="10" Placement="Placement.Near" offset="-55" MarkerType="MarkerType.Triangle">
                        </LinearGaugePointer>
                    </LinearGaugePointers>
                    <LinearGaugeRanges>
                        <LinearGaugeRange Start="0.01" End="32" Color="#30B32D" StartWidth="15" EndWidth="15"></LinearGaugeRange>
                        <LinearGaugeRange Start="32" End="68" Color="#FFDF00" StartWidth="15" EndWidth="15"></LinearGaugeRange>
                        <LinearGaugeRange Start="68" End="100" Color="#F03E3E" StartWidth="15" EndWidth="15"></LinearGaugeRange>
                    </LinearGaugeRanges>
                </LinearGaugeAxis>
            </LinearGaugeAxes>
        </EjsLinearGauge>
    </div>
</div>
<div class="col-md-3 property-section">
    <table>
        <tbody>
            <tr style="height: 60px">
                <td style="width: 50%">
                    <div class="property-text">
                        <b>Properties</b>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div> Range Font Color</div>
                </td>&nbsp;&nbsp;&nbsp;
                <td>
                    <div>
                        <EjsDropDownList ID="fontColor" Index="0" DataSource="@fontColor">
                            <DropDownListFieldSettings text="id" value="text"></DropDownListFieldSettings>
                        </EjsDropDownList>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>
@code {

    public Double lineWidth = 0;
    public Boolean rangeColor = false;
    public class ColorType
    {
        public string id { get; set; }
        public string text { get; set; }
    }
    List<ColorType> fontColor = new List<ColorType>()
{
        new ColorType(){ id= "Default", text= "Default Color" },
        new ColorType(){ id= "Range", text= "Range Color" },
    };
    public void colorChange(Syncfusion.EJ2.Blazor.DropDowns.ChangeEventArgs color)
    {
        this.rangeColor = (color.Value.ToString() == "Default Color") ? false : true;
        this.StateHasChanged();
    }

}