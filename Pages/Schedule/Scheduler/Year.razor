@page "/scheduler/year-view"

@using Syncfusion.Blazor.Schedule
@inherits SampleBaseComponent;

<SampleDescription>
    <p> This demo shows the experience of showing the annual year events in a single view with different orientations.</p>
</SampleDescription>
<ActionDescription>
   <p>In this demo, we have showcased the <code>Year</code> and <code>TimelineYear</code> views that help to view the appointment in an annual calendar view. The view options are enabled by using the <code>ScheduleView</code> property.
    In the <code>TimelineYear</code>, <code>Horizontal</code> and <code>Vertical</code> orientations are available to view the events with a different layout. </p>
</ActionDescription>

<div class="control-section">
    <div class="content-wrapper">
        <SfSchedule TValue="EventData" Width="100%" Height="555px" @bind-SelectedDate="@CurrentDate">
            <ScheduleEventSettings DataSource="@AppointmentData"></ScheduleEventSettings>
            <ScheduleViews>
                <ScheduleView Option="View.Year"></ScheduleView>
                <ScheduleView MaxEventsPerRow="2" Option="View.TimelineYear" Orientation="Orientation.Horizontal" DisplayName="Horizontal Timeline Year" IsSelected="true"></ScheduleView>
                <ScheduleView MaxEventsPerRow="3" Option="View.TimelineYear" Orientation="Orientation.Vertical" DisplayName="Vertical Timeline Year">
                    <ScheduleViewGroup Resources="@ResourceName"></ScheduleViewGroup>
                </ScheduleView>
            </ScheduleViews>
            <ScheduleResources>
                <ScheduleResource TItem="ResourceData" TValue="int" DataSource="@TaskData" Field="TaskId" Title="Category" Name="Categories" TextField="Text" IdField="Id" ColorField="Color"></ScheduleResource>
            </ScheduleResources>
        </SfSchedule>
    </div>
</div>

@code{
    public static List<EventData> AppointmentData = GenerateEvents();
    public DateTime CurrentDate = DateTime.Today;
    public string[] ResourceName = { "Categories" };
    public List<ResourceData> TaskData { get; set; } = new List<ResourceData> {
        new ResourceData{ Text = "Nancy", Id= 1, Color = "#df5286" },
        new ResourceData{ Text = "Steven", Id= 2, Color = "#7fa900" },
        new ResourceData{ Text = "Robert", Id= 3, Color = "#ea7a57" },
        new ResourceData{ Text = "Smith", Id= 4, Color = "#5978ee" },
        new ResourceData{ Text = "Micheal", Id= 5, Color = "#df5286" }
    };
    public static List<EventData> GenerateEvents()
    {
        List<EventData> dataCollections = new List<EventData>(360);
        int count = 250;
        int year = DateTime.Now.Year;
        var names = new string[] { "Bering Sea Gold", "Technology", "Maintenance", "Meeting", "Travelling", "Annual Conference", "Birthday Celebration", "Farewell Celebration", "Wedding Aniversary", "Alaska: The Last Frontier", "Deadest Catch", "Sports Day", "MoonShiners", "Close Encounters", "HighWay Thru Hell", "Daily Planet", "Cash Cab", "Basketball Practice", "Rugby Match", "Guitar Class", "Music Lessons", "Doctor checkup", "Brazil - Mexico", "Opening ceremony", "Final presentation" };
        DateTime startDate = new DateTime(year - 2, 1, 1);
        DateTime endDate = new DateTime(year + 2, 12, 31);
        var id = 1;

        for (var a = 0; a < count; a++)
        {
            Random random = new Random();
            double num = random.NextDouble();

            DateTimeOffset sdate = new DateTimeOffset(startDate).ToUniversalTime();
            long startDateMilliSeconds = sdate.ToUnixTimeMilliseconds();

            DateTimeOffset edate = new DateTimeOffset(endDate).ToUniversalTime();
            long endDateMilliSeconds = edate.ToUnixTimeMilliseconds();

            long Operations = (long)(num * (endDateMilliSeconds - startDateMilliSeconds) + startDateMilliSeconds);
            DateTime start = DateTimeOffset.FromUnixTimeMilliseconds(Operations).UtcDateTime;
            DateTime end = start.AddHours(1);
            int ncount = (int)Math.Floor(Convert.ToDecimal(num * names.Length));
            dataCollections.Add(new EventData
            {
                Id = id,
                Subject = names[ncount],
                StartTime = start,
                EndTime = end,
                IsAllDay = (id % 10 == 0) ? true : false,
                TaskId = (id % 5) + 1
            });
            id++;
        }
        return dataCollections;
    }
    public class ResourceData
    {
        public int Id { get; set; }
        public string Text { get; set; }
        public string Color { get; set; }
    }
    public class EventData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public string Location { get; set; }
        public string Description { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public Nullable<bool> IsAllDay { get; set; }
        public string RecurrenceRule { get; set; }
        public Nullable<int> RecurrenceID { get; set; }
        public string RecurrenceException { get; set; }
        public string StartTimezone { get; set; }
        public string EndTimezone { get; set; }
        public int TaskId { get; set; }
    }
}