@page "/Schedule/WorkHours"

@using Syncfusion.EJ2.Blazor.Schedule

@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Work Hours";
    SampleBrowser.CurrentControlName = "Scheduler";
    SampleBrowser.CurrentControlCategory = "Scheduler";
    SampleBrowser.CurrentControl = SampleBrowser.Config.Schedule;
    SampleBrowser.ActionDescription = new string[] {
        @"<p>
             This demo showcases how to set the required working hours on Scheduler, thus visually highlighting the cells underlying the
            given work hour range.
        </p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>
            In this demo, the work hours are set by using the
            <code>workHours</code> property and it usually applies only on the working days defined for the Schedule. It can either be highlighted
            or not by defining the
            <code>Highlight</code> option within the
            <code>WorkHours</code> property. The working hour range can be defined by making use of the
            <code>Start</code> and <code>End</code> option available within the
            <code>WorkHours</code> property.
        </p>
        <p>
            To set discontinuous working hours on a day, then the default
            <code>WorkHours</code> on Scheduler needs to be disabled by setting false to
            <code>Highlight</code> option within it. Then, make use of the
            <code>SetWorkHours</code> method which accepts the days collection and the start & end hour values as parameters.
        </p>"
    };
}
@*End:Hidden*@
<div class="col-lg-12 control-section">
    <div class="schedule-wrapper">
        <EjsSchedule TValue="ScheduleData.EmployeeEventData" Width="100%" Height="650px" CurrentView="View.WorkWeek" SelectedDate="@(new DateTime(2018, 2, 15))" WorkDays="@WorkingDays">
            <ScheduleWorkHours Highlight="true" Start="@StartWorkingHours" End="@EndWorkingHours"></ScheduleWorkHours>
            <ScheduleViews>
                <ScheduleView Option="View.Day"></ScheduleView>
                <ScheduleView Option="View.Week"></ScheduleView>
                <ScheduleView Option="View.WorkWeek"></ScheduleView>
                <ScheduleView Option="View.Month"></ScheduleView>
            </ScheduleViews>
            <ScheduleEventSettings DataSource="@DataSource"></ScheduleEventSettings>
        </EjsSchedule>
    </div>
</div>

@code{
    public List<ScheduleData.EmployeeEventData> DataSource = new ScheduleData().GetEmployeeEventData();
    static int[] WorkingDays = new int[] { 1, 3, 5 };
    public string StartWorkingHours = "08:00";
    public string EndWorkingHours = "20:00";
}