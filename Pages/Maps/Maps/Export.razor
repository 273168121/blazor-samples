@page "/maps/export"

@using Syncfusion.Blazor.Maps
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs



@inherits SampleBaseComponent;
    <div class="col-lg-9 control-section sb-property-border">
        <SfMaps @ref="@Maps" AllowPdfExport="true" AllowImageExport="true">
            <MapsTitleSettings Text="Location of the Wonders in the World">
                <MapsTitleTextStyle Size="16px"/>
            </MapsTitleSettings>
            <MapsLayers>
                <MapsLayer ShapeData='new {dataOptions ="scripts/MapsData/WorldMap.json"}' LayerType="@LayerValue">
                    <MapsShapeSettings Fill="#D3D3D3">
                        <MapsShapeBorder Color="#000000" Width="0.1"/>
                    </MapsShapeSettings>
                    <MapsMarkerSettings>
                        <MapsMarker Visible="true" Shape="MarkerType.Balloon" Fill="#E13E40" Height="20" Width="15" DataSource="@MarkerDataSource">
                            <MapsMarkerTooltipSettings Visible="true" ValuePath="Name"/>
                        </MapsMarker>
                    </MapsMarkerSettings>
                </MapsLayer>
            </MapsLayers>
        </SfMaps>
    </div>
<div class="col-lg-3 property-section">
<div class="property-panel-header">Properties</div>
    <table title="Properties" style="width: 100%">
        <tbody>
            <tr style="height: 50px">
                <td style="width: 40%">
                    <div>
                        Map Type
                    </div>
                </td>
                <td style="width: 60%;">
                    <div>
                        <SfDropDownList TValue="string" TItem="MapType" DataSource="@MapLayerTypes" Value="@MapValue" Width="95%">
                            <DropDownListEvents TValue="string" ValueChange="MapLayerTypeValueChange"/>
                            <DropDownListFieldSettings Text="Text" Value="Text"/>
                        </SfDropDownList>
                    </div>

                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 40%">
                    <div>
                        Export Type
                    </div>
                </td>
                <td style="width: 60%;margin-Top:6%;display:@GeoDisplay">
                    <div>
                        <SfDropDownList TValue="string" TItem="FileFormatType" DataSource="@GeometryFileTypes" Value="@FileType" Width="95%">
                            <DropDownListEvents TValue="string" ValueChange="MapFileValueChange"/>
                            <DropDownListFieldSettings Text="Text" Value="Text"/>
                        </SfDropDownList>
                    </div>
                </td>
                 <td style="width: 60%;margin-Top:6%;display:@OsmDisplay">
                    <div>
                        <SfDropDownList TValue="string" TItem="FileFormatType" DataSource="@OsmFileTypes" Value="@FileType" Width="95%">
                            <DropDownListEvents TValue="string" ValueChange="MapFileValueChange"/>
                            <DropDownListFieldSettings Text="Text" Value="Text"/>
                        </SfDropDownList>
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 40%">
                    <div>File Name</div>
                </td>
                <td style="width: 40%;">
                    <div class="e-float-input" style='margin-top: 0px;'>
                        <SfTextBox Value="@FileName" ValueChange="@NameChange"/>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div style="height: 45px;margin-left:70%; text-transform:none !important; width: 80px; ">
                        <SfButton Content="Export" OnClick="ExportClick" CssClass="e-info" IsToggle="true" IsPrimary="true"/>
                    </div>
                </td>
            </tr>

        </tbody>
    </table>
</div>
@code {
    SfMaps Maps;
    public string GeoDisplay = "block";
    public string OsmDisplay = "none";
    public string FileType { get; set; } = "JPEG";
    public string MapValue { get; set; } = "Geometry";
    public ShapeLayerType LayerValue = ShapeLayerType.Geometry;
    public string FileName { get; set; } = "Maps";
    public class MarkerData {
        public double Latitude;
        public double Longitude;
        public string Name;
    };
    public List<MarkerData> MarkerDataSource = new List<MarkerData> {
        new MarkerData { Longitude=116.5703749, Latitude=40.4319077, Name="The Great Wall of China, China" },
        new MarkerData { Longitude=35.4443622, Latitude=30.3284544, Name="Petra, Jorden" },
        new MarkerData { Longitude=78.0421552, Latitude=27.1750151, Name="Taj Mahal, Agra, India" },
        new MarkerData { Longitude=12.4922309, Latitude=41.8902102, Name="The Roman Colosseum, Rome, Italy" },
        new MarkerData { Longitude=-88.5677826, Latitude=20.6842849, Name="The Chichen Itza, Mexico" },
        new MarkerData { Longitude=-72.5449629, Latitude=-13.1631412, Name="Machu Picchu, Peru" },
        new MarkerData { Longitude=-43.2104872, Latitude=-22.951916, Name="Christ Redeemer, Rio de janeiro, Brazil" }
    };
    public class MapType {
        public string Id { get; set; }
        public string Text { get; set; }
    }
    private List<MapType> MapLayerTypes = new List<MapType>() {
        new MapType(){ Id= "Geometry", Text= "Geometry" },
        new MapType(){ Id= "OSM", Text= "OSM" },
    };
    public class FileFormatType {
        public string Id { get; set; }
        public string Text { get; set; }
    }
    private List<FileFormatType> GeometryFileTypes = new List<FileFormatType>() {
        new FileFormatType(){ Id= "JPEG", Text= "JPEG" },
        new FileFormatType(){ Id= "PNG", Text= "PNG" },
        new FileFormatType(){ Id= "SVG", Text= "SVG" },
        new FileFormatType(){ Id= "PDF", Text= "PDF" },
    };
    private List<FileFormatType> OsmFileTypes = new List<FileFormatType>() {
        new FileFormatType(){ Id= "JPEG", Text= "JPEG" },
        new FileFormatType(){ Id= "PNG", Text= "PNG" },
        new FileFormatType(){ Id= "PDF", Text= "PDF" },
    };
    private void NameChange(ChangedEventArgs args) {
        FileName = args.Value;
    }
    private void MapFileValueChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args) {
        FileType = args.Value;
    }
    public void MapLayerTypeValueChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args) {
        MapValue = args.Value;
        if (MapValue == "Geometry") {
            LayerValue = ShapeLayerType.Geometry;
            GeoDisplay = "block";
            OsmDisplay = "none";
        } else {
            LayerValue = ShapeLayerType.OSM;
            GeoDisplay = "none";
            OsmDisplay = "block";
        }
    }
    private void ExportClick(MouseEventArgs args) {
        ExportType ExportFileType = ExportType.JPEG;
        switch (FileType) {
            case "JPEG":
                ExportFileType = ExportType.JPEG;
                break;
            case "PNG":
                ExportFileType = ExportType.PNG;
                break;
            case "SVG":
                ExportFileType = ExportType.SVG;
                break;
            case "PDF":
                ExportFileType = ExportType.PDF;
                break;
        }
        Maps.Export(ExportFileType, FileName);
    }
}