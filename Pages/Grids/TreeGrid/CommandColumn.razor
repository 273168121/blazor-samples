@page "/TreeGrid/CommandColumn"

@using Syncfusion.EJ2.Blazor.TreeGrid
@using Syncfusion.EJ2.Blazor.Grids;
@using Syncfusion.EJ2.Blazor.Data
@using Syncfusion.EJ2.Blazor

@*Hidden:Lines*@
@using ej2_blazor_samples
@using ej2_blazor_selfdata

@{
    SampleBrowser.CurrentSampleName = "Command Column";
    SampleBrowser.CurrentControlName = "TreeGrid";
    SampleBrowser.CurrentControlCategory = "TreeGrid";
    SampleBrowser.CurrentControl = SampleBrowser.Config.TreeGrid;
    SampleBrowser.ActionDescription = new string[] {
        @"<p>
            This sample demonstrates CRUD operations in TreeGrid using command column. You can perform CRUD operations as follows,
        </p>
        <ul>
            <li><code>Edit</code> - To edit record, double click a row or click Edit button from command column after selected a row.</li>
            <li><code>Delete</code> - To delete record, click Delete button from command column after selected a row.</li>
            <li><code>Update, Cancel</code> -You can save or discard changes by click Update and Cancel button from command column respectively.</li>
        </ul>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>
            The TreeGrid provides an option to render CRUD action buttons in a column by using the CommandColumn feature. The <code><a target='_blank' class='code' href='#'>columns->commands</a></code> property accepts array of CommandModel object. The predefined command button can be defined by using type property.
        </p>
        <p>
            The built-in command button are,
        </p>
        <ul>
            <li><code>Edit </code></li>
            <li><code>Delete</code></li>
            <li><code>Cancel</code></li>
            <li><code>Save</code></li>
        </ul>
        <p>
        <br/> More information on the command column configuration can be found in this documentation section.
        </p>"
    };
}
@*End:Hidden*@

@{
    List<object> commands = new List<object>();
    commands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    commands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });
    commands.Add(new { type = "Save", buttonOption = new { iconCss = "e-icons e-update", cssClass = "e-flat" } });
    commands.Add(new { type = "Cancel", buttonOption = new { iconCss = "e-icons e-cancel-icon", cssClass = "e-flat" } });
}

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <EjsTreeGrid DataSource="@treeData" IdMapping="TaskID" ParentIdMapping="ParentID" TreeColumnIndex="1" AllowPaging="true" Height="400">
                <TreeGridPageSettings PageSize="2"></TreeGridPageSettings>
                <TreeGridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.EJ2.Blazor.TreeGrid.EditMode.Row"></TreeGridEditSettings>
                <TreeGridColumns>
                    <TreeGridColumn Field="TaskID" HeaderText="Task ID" Width="60" IsPrimaryKey="true" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="TaskName" HeaderText="Task Name" Width="100"></TreeGridColumn>
                    <TreeGridColumn Field="StartDate" HeaderText=" Start Date" Format="yMd" Type="date" Width="90" TextAlign="TextAlign.Right" EditType="datepickeredit"></TreeGridColumn>
                    <TreeGridColumn Field="Duration" HeaderText="Duration" Width="80" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="Progress" HeaderText="Progress" Width="80"></TreeGridColumn>
                    <TreeGridColumn HeaderText="Manage Records" Width="135" Commands="commands"></TreeGridColumn>
                </TreeGridColumns>
            </EjsTreeGrid>
        </div>
    </div>
</div>

@code{

    public List<SelfReferenceData> treeData { get; set; }

    protected override void OnInitialized()
    {
        this.treeData = SelfReferenceData.GetTree().ToList();
    }
}
