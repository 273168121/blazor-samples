@page "/Diagrams/HistoryManager"

@using Syncfusion.EJ2.Blazor.Diagrams
@using Syncfusion.EJ2.Blazor.Buttons
@using Syncfusion.EJ2.Blazor.Lists
@using Syncfusion.EJ2.Blazor.Inputs
@using System.Collections.ObjectModel
@inherits SampleBaseComponent;
@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "History Manager";
    SampleBrowser.CurrentControlName = "Diagram";
    SampleBrowser.CurrentControlCategory = "Diagram";
    SampleBrowser.TitleTag = "Diagram . HistoryManager . Syncfusion Blazor Components - Preview";
    SampleBrowser.MetaDescription = "This sample demonstrates viewing, deleting, limiting diagram history and groups diagram actions and stores it asa single entry in the history manager.";
    SampleBrowser.CurrentControl = SampleBrowser.Config.Diagram;
    SampleBrowser.ActionDescription = new string[] {
        @" <p>
            This sample demonstrates viewing, deleting, limiting diagram history and groups diagram actions and stores it as a single entry in the history manager.

        </p>"
    };
    SampleBrowser.Description = new string[] {
       @"<p>
           Diagram history are being handle all the diagram history. Using <code>StackLimit</code> property of the history manager
        we limit the no. of entries can be stored on the diagram history. Also, we can get the list of entries in the undo
        list and redo list using <code>UndoStack</code> and <code>RedoStack</code>. Also diagram history manager have the
        option to group the action as the single entry by the help of the <code>StartGroupAction</code> and <code>EndGroupAction</code>        public Api. Also, we can add the custom entries to the diagram history.
    </p>
        <br>"
    };
}
@*End:Hidden*@


<div class="col-lg-8 control-section" style="border-right: 1px solid #D7D7D7">
    <div id="diagram-space" class="content-wrapper">
        <EjsDiagram Width="100%" Height="600px" @ref="@diagram" Nodes="@NodeCollection" Connectors="@ConnectorCollection">
            <DiagramSnapSettings Constraints="@SnapConstraints.None"></DiagramSnapSettings>
            <DiagramEvents HistoryChanged="@HistoryChanged"></DiagramEvents>
            <DiagramPageSettings FitOptions="@FitOptions"></DiagramPageSettings>
        </EjsDiagram>
    </div>

</div>
<div id="historyPropertySection" class="col-lg-4 property-section">
    <div class="property-panel-header">
        History manager settings
    </div>
    @*Hidden:Lines*@
    <style>
        #listview, #listviewgrp {
            border: 1px solid #dddddd;
            border-radius: 3px;
        }

        .control-section {
            overflow: auto;
        }

        .property-panel-header {
            padding-top: 15px;
            padding-bottom: 5px;
            font-weight: 600;
            font-size: 15px;
        }

        .headingstyle {
            color: #807f7f;
            font-size: 15px;
            height: 50px;
            width: 100%;
            border-bottom: 1px solid #d9dedd;
            padding: 10px;
        }

        .e-btn, .e-css.e-btn {
            font-size: 14px;
        }

        #flat-list,
        #group-list {
            width: 49%;
            margin: auto;
            margin-bottom: 15px;
        }

            #flat-list h4, #group-list h4 {
                padding-left: 16px;
            }

        #flat-list {
            float: left;
            padding-left: 16px;
        }

        #group-list {
            float: right;
            padding-right: 16px;
        }

        .row {
            margin-left: 0px;
            margin-right: 0px;
        }

        .undoListstyle {
            width: 100%;
            border: none;
        }
    </style>
    @*End:Hidden*@
    <div class="row property-panel-content" style="margin-left :0px;margin-right:0px" id="appearance">
        <div class="row property-panel-content" style="margin-left :0px;margin-right:0px">
            <div class="row">
                <div class="listbox" style="height:100%;border: 1px solid #e0e0e0">
                    <div class="headingstyle" style="height:40px">
                        <span>
                            Undo Stack
                        </span>
                        <div style="float: right; margin-top: -5px">
                            <EjsButton Content="Undo" Disabled="@IsEnableUndoButton" @onclick="OnToggleClick"></EjsButton>

                        </div>
                    </div>

                    <EjsListView ID="undoList" CssClass="undoListstyle" Height="180px" DataSource="@Listdata">
                        <ListViewFieldSettings Text="Text"></ListViewFieldSettings>
                    </EjsListView>

                </div>
            </div>
            <div class="row">
                <div class="listbox" style="        height: 100%;
        border: 1px solid #e0e0e0">
                    <div class="headingstyle" style="height:40px">
                        <span>
                            Redo Stack
                        </span>
                        <div style="float: right; margin-top: -5px">
                            <EjsButton Content="Redo" Disabled="@IsEnableRedoButton" @onclick="Redo"></EjsButton>

                        </div>
                    </div>

                    <EjsListView ID="Redo" CssClass="undoListstyle" Height="180px" DataSource="@RedoListdata">
                        <ListViewFieldSettings Text="Text"></ListViewFieldSettings>
                    </EjsListView>

                </div>
            </div>
            <div class="row" style="padding-top: 10px">
                <div style="display: table;height: 35px; padding-left: 0px" class="col-xs-6">
                    <div style="display: table-cell; vertical-align: middle">Stack Limit</div>
                </div>
                <div class="col-xs-6" style="padding-left: 0px; padding-right: 0px">
                    <EjsNumericTextBox TValue="int" ID="StackLimit" Format="n0" Min="0" Value="@StackValue" Step="1" ValueChanged="@setStackLimit"></EjsNumericTextBox>
                </div>
            </div>
            <div class="row" style="padding-top: 10px">
                <div class="col-xs-6" style="padding-left: 0px;">
                    <EjsButton @ref="groupaction" Content="@actioncontent" @onclick="startaction" IsToggle="true"></EjsButton>
                </div>
                <div class="col-xs-6" style="padding-left: 16px;padding-right: 0px;">
                    <EjsButton Content="Clear History" @onclick="clearhistory"></EjsButton>
                </div>
            </div>
        </div>
    </div>
</div>

@functions
    {
    EjsDiagram diagram;
    EjsButton groupaction;
    bool IsEnableUndoButton = true;
    bool IsEnableRedoButton = true;
    private int StackValue = 0;
    string actioncontent = "Start Group Action";
    DiagramFitOptions FitOptions = new DiagramFitOptions()
    {
        CanFit = true,
        Mode = FitModes.Width

    };
    public void OnToggleClick(MouseEventArgs args)
    {
        diagram.Undo();
    }
    public void Redo(MouseEventArgs args)
    {
        diagram.Redo();
    }
    public void startaction(MouseEventArgs args)
    {
        if (groupaction.Content == "Start Group Action")
        {
            actioncontent = "End Group Action";
            diagram.StartGroupAction();
        }
        else
        {
            actioncontent = "Start Group Action";
            diagram.EndGroupAction();
        }

        StateHasChanged();
    }
    public async void clearhistory(MouseEventArgs args)
    {
        diagram.ClearHistory();
        this.Updatevalue();
    }

    class DataModel
    {
        public string Text { get; set; }
    }
    public List<object> Listdata = new List<object>();
    public List<object> RedoListdata = new List<object>();

    public async void HistoryChanged(IBlazorHistoryChangeArgs arg)
    {
        this.Updatevalue();
    }
    public async void setStackLimit(int value)
    {
        StackValue = value;
        await diagram.SetStackLimit(value);
    }
    public async void Updatevalue()
    {
        List<object> undoListdata = new List<object>();
        List<object> redoListdata = new List<object>();
        List<HistoryEntry> undostack = await diagram.GetHistoryStack(true);
        List<HistoryEntry> redostack = await diagram.GetHistoryStack(false);
        IsEnableUndoButton = undostack.Count > 0 ? false : true;
        IsEnableRedoButton = redostack.Count > 0 ? false : true;
        for (int i = 0; i < undostack.Count; i++)
        {
            DataModel newdata = new DataModel();
            string value = undostack[i].Type.ToString();
            newdata.Text = value;
            undoListdata.Add(newdata);

        }
        Listdata = undoListdata;
        for (int i = 0; i < redostack.Count; i++)
        {
            DataModel newdata = new DataModel();
            string value = redostack[i].Type.ToString();
            newdata.Text = value;
            redoListdata.Add(newdata);

        }
        RedoListdata = redoListdata;
        StateHasChanged();
    }

    public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
    public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();

    protected override void OnInitialized()
    {

        DiagramNode node1 = createNode("node1", 400, 30, FlowShapes.Terminator, "Start", "#FFB2B2", "#111111", 70, 40);
        DiagramNode node2 = createNode("node2", 400, 100, FlowShapes.Process, "Process", "#DCDCDC", "#111111", 70, 40);
        DiagramPort port1 = createPort(node2, "designPort", new NodePortOffset() { X = 0, Y = 0.5 });
        DiagramNode node3 = createNode("node3", 400, 180, FlowShapes.Process, "Coding", "#DCDCDC", "#111111", 70, 40);
        DiagramPort port2 = createPort(node3, "codingPort", new NodePortOffset() { X = 0, Y = 0.5 });
        DiagramNode node4 = createNode("node4", 400, 260, FlowShapes.Process, "Testing", "#DCDCDC", "#111111", 70, 40);
        DiagramNode node5 = createNode("node5", 400, 340, FlowShapes.Decision, "Errors?", "#A2D8B0", "#111111", 80, 60);
        DiagramNode node6 = createNode("node6", 400, 430, FlowShapes.Process, "End", "#FFB2B2", "#111111", 70, 40);
        DiagramNode node7 = createNode("node7", 220, 180, FlowShapes.Decision, "Design Error?", "#A2D8B0", "#111111", 100, 60);
        DiagramPort n7port1 = createPort(node7, "porterror", new NodePortOffset() { X = 0.5, Y = 0 });
        DiagramPort n7port2 = createPort(node7, "portcoding", new NodePortOffset() { X = 1, Y = 0.5 });
        DiagramPort n7port3 = createPort(node7, "portdesign", new NodePortOffset() { X = 0.5, Y = 1 });
        createConnector("connector1", "node1", "node2");
        createConnector("connector2", "node2", "node3");
        createConnector("connector3", "node3", "node4");
        createConnector("connector4", "node4", "node5");
        createConnector("connector5", "node5", "node6");
        createConnector("connector6", "node5", "node7");
        createConnector("connector7", "node7", "node3", "portcoding", "codingPort");
        createConnector("connector8", "node7", "node2", "porterror", "designPort");
    }
    public void createConnector(string id, string sourceid, string targetid, string sourceportid = null, string targetportid = null)
    {
        DiagramConnector connector = new DiagramConnector()
        {
            Id = id,
            SourceID = sourceid,
            TargetID = targetid,
            SourcePortID = sourceportid,
            TargetPortID = targetportid,
            Type = Syncfusion.EJ2.Blazor.Diagrams.Segments.Orthogonal,
            Style = new ConnectorShapeStyle() { StrokeColor = "#707070", StrokeWidth = 1.25 },
            TargetDecorator = new ConnectorTargetDecorator() { Style = new DecoratorShapeStyle() { Fill = "#707070", StrokeColor = "#707070" } }
        };
        if ((id == "connector5") || (id == "connector6") || (id == "connector7") || (id == "connector8"))
        {
            ObservableCollection<DiagramConnectorAnnotation> annotationcollection = new ObservableCollection<DiagramConnectorAnnotation>();
            DiagramConnectorAnnotation annotation = new DiagramConnectorAnnotation() { Style = new AnnotationStyle() { Fill = "white" } };
            if ((id == "connector5") || (id == "connector7"))
            {
                annotation.Content = "No";
            }
            else if ((id == "connector6") || (id == "connector8"))
            {
                annotation.Content = "Yes";
            }
            annotationcollection.Add(annotation);
            connector.Annotations = annotationcollection;
        };
        if (id == "connector6" || id == "connector7")
        {
            connector.Type = Segments.Orthogonal;
            DiagramConnectorSegment segment = new DiagramConnectorSegment() { Type = Segments.Orthogonal, Length = id == "connector7" ? 10 : 150, Direction = Direction.Left };
            connector.Segments = new ObservableCollection<DiagramConnectorSegment>() { segment };
        }
        ConnectorCollection.Add(connector);
    }

    public DiagramNode createNode(string id, double offx, double offy, FlowShapes shape, string content, string nodefill, string annotationcolor, int nodewidth, int nodeheight)
    {
        DiagramNode node = new DiagramNode()
        {
            Id = id,
            OffsetX = offx,
            OffsetY = offy,
            Width = nodewidth,
            Height = nodeheight,
            Shape = new DiagramShape() { Type = Syncfusion.EJ2.Blazor.Diagrams.Shapes.Flow, FlowShape = shape },
            Style = new NodeShapeStyle() { Fill = nodefill, StrokeColor = "transparent" }
        };
        DiagramNodeAnnotation annotation = new DiagramNodeAnnotation()
        {
            Content = content,
            Style = new AnnotationStyle() { Color = annotationcolor }
        };
        node.Annotations = new ObservableCollection<DiagramNodeAnnotation>()
{
            annotation
        };
        NodeCollection.Add(node);
        return node;
    }
    public DiagramPort createPort(DiagramNode node, string pid, NodePortOffset offset)
    {
        DiagramPort port = new DiagramPort()
        {
            Id = pid,
            Offset = offset,
            Visibility = PortVisibility.Hidden
        };
        if (node.Ports == null)
        {
            node.Ports = new ObservableCollection<DiagramPort>();
        }
        (node.Ports as ObservableCollection<DiagramPort>).Add(port);

        return port;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(500);
            diagram.SetStackLimit(StackValue);
        }
    }
}


