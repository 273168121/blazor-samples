@page "/Diagrams/OrganizationModel"

@using Syncfusion.EJ2.Blazor.Diagrams
@using System.Collections.ObjectModel
@using Syncfusion.EJ2.Blazor.Buttons
@using Syncfusion.EJ2.Blazor.Inputs
@using Syncfusion.EJ2.Blazor.DropDowns
@using Newtonsoft.Json
@inherits SampleBaseComponent;
@*Hidden:Lines*@
<style>
    #diagram {
        display: block;
    }


    .image-pattern-style {
        background-color: white;
        background-size: contain;
        background-repeat: no-repeat;
        height: 75px;
        width: calc((100% - 18px) / 3);
        cursor: pointer;
        border: 1px solid #D5D5D5;
        background-position: center;
        float: left;
    }

        .image-pattern-style:hover {
            border-color: gray;
            border-width: 2px;
        }

    .row {
        margin-left: 0px;
        margin-right: 0px;
        display: block;
    }

    .property-panel-header {
        padding-top: 15px;
        padding-bottom: 5px;
        font-weight: 600;
        font-size: 15px;
    }

    .row-header {
        font-size: 13px;
        font-weight: 600;
    }

    .row-header1 {
        font-size: 12px;
        padding-left: 2px;
        font-weight: 400;
    }

    .e-selected-orientation-style {
        border-color: #006CE6;
        border-width: 2px;
    }


    .e-selected-pattern-style {
        border-color: #006CE6;
        border-width: 2px;
    }

    .e-checkbox-wrapper .e-label {
        font-size: 12px;
    }

    .col-xs-6 {
        padding-left: 0px;
        padding-right: 0px;
    }

    .sb-property-border {
        border-right: 1px solid #D7D7D7;
    }
</style>
@*End:Hidden*@
<div class="col-lg-8 control-section sb-property-border">
    <div id="diagram-space" class="content-wrapper">
        <EjsDiagram @ref="@diagram" id="diagram" Width="100%" Height="690px" NodeDefaults="@NodeDefaults" ConnectorDefaults="@ConnectorDefaults" Layout="@LayoutValue">
            <DiagramDataSource Id="Id" ParentId="Manager" DataSource="@DataSource" DataMapSettings="@datamap">
            </DiagramDataSource>
            <DiagramSnapSettings Constraints="SnapConstraints.None"></DiagramSnapSettings>
        </EjsDiagram>
    </div>
</div>
<div class="col-lg-4 property-section">
    <div class="property-panel-header">
        Properties
    </div>
    <div class="row property-panel-content" id="appearance">
        <div class="row" style="padding-top: 10px;">
            <div class="row row-header">
                Orientation
            </div>
            <div id="orientation">
                <div class="row" style="padding-top: 8px">
                    <div class="@dict["topToBottom"]" @onclick="ToptoBottomClick" id="topToBottom" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/common-orientation/toptobottom.png); margin-right: 3px">
                    </div>
                    <div class="@dict["bottomToTop"]" id="bottomToTop" @onclick="BottomtoTopClick" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/common-orientation/bottomtotop.png); margin: 0px 3px">
                    </div>
                    <div class="@dict["leftToRight"]" id="leftToRight" @onclick="LefttoRightClick" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/common-orientation/lefttoright.png); margin-right:0px 3px">
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="@dict["rightToLeft"]" id="rightToLeft" @onclick="RighttoLeftClick" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/common-orientation/righttoleft.png); margin: 0px 3px">
                    </div>
                </div>
            </div>
            <div class="row row-header" style="padding-top: 10px">
                Subtree Alignment
            </div>
            <div id="pattern">
                <div class="row" style="padding-top: 8px;">
                    <div class="@pattendict["pattern1"]" @onclick="Pattern1Click" id="pattern1" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/patternimages/Pattern_1.png); margin-right: 3px">
                    </div>
                    <div class="@pattendict["pattern2"]" @onclick="Pattern2Click" id="pattern2" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/patternimages/Pattern_2.png); margin: 0px 3px">
                    </div>
                    <div class="@pattendict["pattern3"]" @onclick="Pattern3Click" id="pattern3" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/patternimages/Pattern_3.png); margin: 0px 3px">
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="@pattendict["pattern4"]" id="pattern4" @onclick="Pattern4Click" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/patternimages/Pattern_4.png); margin: 0px 3px">
                    </div>
                    <div class="@pattendict["pattern5"]" id="pattern5" @onclick="Pattern5Click" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/patternimages/Pattern_5.png); margin-right: 3px">
                    </div>
                    <div class="@pattendict["pattern6"]" id="pattern6" @onclick="Pattern6Click" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/patternimages/Pattern_6.png); margin: 0px 3px">
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="@pattendict["pattern7"]" id="pattern7" @onclick="Pattern7Click" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/patternimages/Pattern_7.png); margin: 0px 3px">
                    </div>
                    <div class="@pattendict["pattern8"]" id="pattern8" @onclick="Pattern8Click" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/patternimages/Pattern_8.png); margin: 0px 3px">
                    </div>
                    <div class="@pattendict["pattern9"]" id="pattern9" @onclick="Pattern9Click" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/patternimages/Pattern_9.png); margin: 0px 3px">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row property-panel-content" style="padding-top: 10px">
        <div class="row row-header">
            Behavior
        </div>
        <div class="row" style="padding-top: 8px">
            <div style="display: table;height: 35px;" class="col-xs-6">
                <div style="display: table-cell; vertical-align: middle">Horizontal Spacing</div>
            </div>
            <div class="col-xs-6">
                <EjsNumericTextBox TValue="int?" ID="hSpacing" Format="###.##" Width="100%" Min="20" Max="60" Step="2" Value="@HValue">
                    <NumericTextBoxEvents TValue="int?" ValueChange="@HSpacingChange"></NumericTextBoxEvents>
                </EjsNumericTextBox>
            </div>
        </div>
        <div class="row" style="padding-top: 8px">
            <div style="display: table;height: 35px;" class="col-xs-6">
                <div style="display: table-cell; vertical-align: middle">Vertical Spacing</div>
            </div>
            <div class="col-xs-6">
                <EjsNumericTextBox TValue="int?" ID="vSpacing" Format="###.##" Width="100%" Min="20" Max="60" Step="2" Value="@VValue">
                    <NumericTextBoxEvents TValue="int?" ValueChange="VSpacingChange"></NumericTextBoxEvents>
                </EjsNumericTextBox>
            </div>
        </div>
    </div>
</div>

@functions
    {
    static string selecteditem = "image-pattern-style  e-selected-orientation-style";
    static string unselecteditem = "image-pattern-style";
    static string selectedPattenitem = "image-pattern-style  e-selected-pattern-style";
    Dictionary<string, string> dict = new Dictionary<string, string>() {
        { "topToBottom", selecteditem },
        { "bottomToTop", unselecteditem },
        { "leftToRight", unselecteditem },
        { "rightToLeft", unselecteditem }
    };
    Dictionary<string, string> pattendict = new Dictionary<string, string>() {
       { "pattern1", unselecteditem },
       { "pattern2", unselecteditem },
       { "pattern3", unselecteditem },
       { "pattern4", unselecteditem },
       { "pattern5", selectedPattenitem },
       { "pattern6", unselecteditem },
       { "pattern7", unselecteditem },
       { "pattern8", unselecteditem },
       { "pattern9", unselecteditem },
    };

    EjsDiagram diagram;
    EjsCheckBox checkBox;
    public int? HValue { get; set; } = 40;
    public int? VValue { get; set; } = 40;
    DiagramLayout LayoutValue = new DiagramLayout();

    List<DiagramDataMapSetting> datamap { get; set; } = new List<DiagramDataMapSetting>() {

            new DiagramDataMapSetting() { Property = "Annotations[0].Content",
        Field = "Role" },
             new DiagramDataMapSetting() { Property = "Style.Fill",
        Field = "Color" }
    };

    TreeInfo LayoutInfo = new TreeInfo()
    {
        CanEnableSubTree = true,
        GetAssistantDetails = new AssistantsDetails() { Assistants = new string[] { "Assistant General Manager" }, Root = "General Manager" },
    };


    DiagramNode NodeDefaults = new DiagramNode
    {
        Height = 50,
        Width = 120,
        Annotations = new ObservableCollection<DiagramNodeAnnotation>()
        {
            new DiagramNodeAnnotation() { Offset = new NodeAnnotationOffset(){ Y =0.5, X= 0.5}, Id = "label",
             Style= new AnnotationStyle(){ Color="white"} }
        },
        LayoutInfo = new DiagramNodeLayoutInfo()
        {
            Orientation = Orientation.Vertical,
            Type = SubTreeAlignments.Right
        }
    };

    DiagramConnector ConnectorDefaults = new DiagramConnector
    {
        Type = Segments.Orthogonal,
        SourceDecorator = new ConnectorSourceDecorator() { Shape = DecoratorShapes.None },
        TargetDecorator = new ConnectorTargetDecorator() { Shape = DecoratorShapes.None }
    };

    public class OrganizationalDetails
    {
        public string Id { get; set; }
        public string Role { get; set; }
        public string Color { get; set; }
        public string Manager { get; set; }
        public string ChartType { get; set; }
        public string Type { get; set; }
        public string Orientation { get; set; }

    }
    public List<object> DataSource = new List<object>()
{
        new OrganizationalDetails(){Id= "parent", Role= "Board", Color = "#71AF17", Manager = "",ChartType = "" },
        new OrganizationalDetails() { Id = "1",Role=  "General Manager", Color = "#71AF17", Manager =  "parent", ChartType ="right"},
        new OrganizationalDetails() { Id = "11", Role= "Assistant General Manager",Color =  "#71AF17", Manager =  "1",ChartType = ""},
        new OrganizationalDetails() { Id = "2", Role= "Human Resource Manager", Color = "#1859B7", Manager =  "1",ChartType = "right"},
        new OrganizationalDetails() { Id = "3", Role= "Trainers", Color = "#2E95D8",  Manager = "2", ChartType =""},
        new OrganizationalDetails() { Id = "4", Role= "Recruiting Team",Color =  "#2E95D8", Manager =  "2",ChartType = ""},
        new OrganizationalDetails() { Id = "5", Role= "Finance Asst. Manager", Color = "#2E95D8", Manager =  "2", ChartType =""},
        new OrganizationalDetails() { Id = "6", Role= "Design Manager", Color = "#1859B7", Manager =  "1", ChartType ="right"},
        new OrganizationalDetails() { Id = "7",Role=  "Design Supervisor",Color =  "#2E95D8",  Manager = "6", ChartType =""},
        new OrganizationalDetails() { Id = "8",Role=  "Development Supervisor",Color =  "#2E95D8", Manager =  "6",ChartType = ""},
        new OrganizationalDetails() { Id = "9",Role=  "Drafting Supervisor", Color = "#2E95D8",  Manager = "6",ChartType = ""},
        new OrganizationalDetails() { Id = "10",Role=  "Operations Manager",Color =  "#1859B7", Manager =  "1", ChartType ="right"},
        new OrganizationalDetails() { Id = "11",Role=  "Statistics Department",Color =  "#2E95D8",  Manager = "10",ChartType = ""},
        new OrganizationalDetails() { Id = "12",Role=  "Logistics Department",Color =  "#2E95D8", Manager =  "10", ChartType =""},
        new OrganizationalDetails() { Id = "16", Role=  "Logistics Department", Color = "#1859B7", Manager =  "1", ChartType ="right"},
        new OrganizationalDetails() { Id = "17",Role=  "Overseas sales Manager",Color =  "#2E95D8", Manager =  "16", ChartType =""},
        new OrganizationalDetails() { Id = "18", Role= "Petroleum Manager", Color = "#2E95D8",  Manager = "16", ChartType =""},
        new OrganizationalDetails() { Id = "20",Role=  "Service Department Manager",Color =  "#2E95D8",  Manager = "16",ChartType = ""},
        new OrganizationalDetails() { Id = "21", Role= "Quality control Department", Color = "#2E95D8",  Manager = "16", ChartType =""},

    };

    protected override void OnInitialized()
    {
        LayoutValue = new DiagramLayout()
        {
            Type = LayoutType.OrganizationalChart,
            LayoutInfo = this.LayoutInfo
        };
    }
    
    public void OnClickconnector()
    {
        diagram.BeginUpdate();
        foreach (var node in diagram.Nodes)
        {
            if (!node.LayoutInfo.HasSubTree)
            {
                node.LayoutInfo.Orientation = Orientation.Horizontal;
                node.LayoutInfo.Type = SubTreeAlignments.Right;
            }
        }
        diagram.EndUpdate();
        diagram.DoLayout();
    }
    public void LeftToRight()
    {
        diagram.Layout.Orientation = LayoutOrientation.LeftToRight;
        StateHasChanged();
    }

    public class ImageFields
    {
        public string Text { get; set; }
    }
    private List<Syncfusion.EJ2.Blazor.SplitButtons.ItemModel> Images = new List<Syncfusion.EJ2.Blazor.SplitButtons.ItemModel>
    () {
    new Syncfusion.EJ2.Blazor.SplitButtons.ItemModel(){Text ="JPG" },
    new Syncfusion.EJ2.Blazor.SplitButtons.ItemModel(){Text="PNG" },
    new Syncfusion.EJ2.Blazor.SplitButtons.ItemModel(){Text="BMP" },
    new Syncfusion.EJ2.Blazor.SplitButtons.ItemModel(){Text="SVG" }
    };


    private void onItemClick()
    {
        IPrintOptions options = new IPrintOptions()
        {
            Margin = new Syncfusion.EJ2.Blazor.Diagrams.MarginModel()
            {
                Left = 0,
                Right = 0,
                Top = 0,
                Bottom = 0
            },
            MultiplePage = checkBox.Checked,
            Region = DiagramRegions.PageSettings,
        };
        // var printOptions = "{mode: 'data', region: 'pageSettings', multiplePage: " + checkBox.Checked.ToString() + ",margin : { left: 0, top: 0, bottom: 0, right: 0 }}";
        diagram.Print(options);

    }

    private void HSpacingChange(Syncfusion.EJ2.Blazor.Inputs.ChangeEventArgs args)
    {
        HValue = (int)args.Value;
        diagram.Layout.HorizontalSpacing = args.Value;
        diagram.DataBind();
    }
    private void VSpacingChange(Syncfusion.EJ2.Blazor.Inputs.ChangeEventArgs args)
    {
        VValue = (int)args.Value;
        diagram.Layout.VerticalSpacing = args.Value;
        diagram.DataBind();
    }

    private void ToptoBottomClick()
    {
        diagram.Layout.Orientation = LayoutOrientation.TopToBottom;
        updateSelection("topToBottom");
    }
    private void LefttoRightClick()
    {
        diagram.Layout.Orientation = LayoutOrientation.LeftToRight;
        updateSelection("leftToRight");
    }
    private void RighttoLeftClick()
    {
        diagram.Layout.Orientation = LayoutOrientation.RightToLeft;
        updateSelection("rightToLeft");
    }
    private void BottomtoTopClick()
    {
        diagram.Layout.Orientation = LayoutOrientation.BottomToTop;
        updateSelection("bottomToTop");
    }
    private void Pattern1Click()
    {
        diagram.BeginUpdate();
        foreach (var node in diagram.Nodes)
        {
            if (!node.LayoutInfo.HasSubTree)
            {
                node.LayoutInfo.Orientation = Orientation.Vertical;
                node.LayoutInfo.Type = SubTreeAlignments.Alternate;
                node.LayoutInfo.Offset = 20;
            }
        }
        updatePatternSelection("pattern1");
        diagram.EndUpdate();
        diagram.DoLayout();
    }
    private void Pattern2Click()
    {
        diagram.BeginUpdate();
        foreach (var node in diagram.Nodes)
        {
            if (!node.LayoutInfo.HasSubTree)
            {
                node.LayoutInfo.Orientation = Orientation.Vertical;
                node.LayoutInfo.Type = SubTreeAlignments.Left;
                node.LayoutInfo.Offset = 20;
            }
        }
        updatePatternSelection("pattern2");
        diagram.EndUpdate();
        diagram.DoLayout();
    }
    private void Pattern3Click()
    {
        diagram.BeginUpdate();
        foreach (var node in diagram.Nodes)
        {
            if (!node.LayoutInfo.HasSubTree)
            {
                node.LayoutInfo.Orientation = Orientation.Vertical;
                node.LayoutInfo.Type = SubTreeAlignments.Left;
                node.LayoutInfo.Offset = -50;
            }
        }
        updatePatternSelection("pattern3");
        diagram.EndUpdate();
        diagram.DoLayout();


    }
    private void Pattern4Click()
    {
        diagram.BeginUpdate();
        foreach (var node in diagram.Nodes)
        {
            if (!node.LayoutInfo.HasSubTree)
            {
                node.LayoutInfo.Orientation = Orientation.Vertical;
                node.LayoutInfo.Type = SubTreeAlignments.Right;
                node.LayoutInfo.Offset = -50;
            }
        }
        updatePatternSelection("pattern4");
        diagram.EndUpdate();
        diagram.DoLayout();
    }
    private void Pattern5Click()
    {
        diagram.BeginUpdate();
        foreach (var node in diagram.Nodes)
        {
            if (!node.LayoutInfo.HasSubTree)
            {
                node.LayoutInfo.Orientation = Orientation.Vertical;
                node.LayoutInfo.Type = SubTreeAlignments.Right;
                node.LayoutInfo.Offset = 20;
            }
        }
        updatePatternSelection("pattern5");
        diagram.EndUpdate();
        diagram.DoLayout();

    }
    private void Pattern6Click()
    {
        diagram.BeginUpdate();
        foreach (var node in diagram.Nodes)
        {
            if (!node.LayoutInfo.HasSubTree)
            {
                node.LayoutInfo.Orientation = Orientation.Horizontal;
                node.LayoutInfo.Type = SubTreeAlignments.Balanced;
                node.LayoutInfo.Offset = 20;
            }
        }
        updatePatternSelection("pattern6");
        diagram.EndUpdate();
        diagram.DoLayout();
    }
    private void Pattern7Click()
    {
        diagram.BeginUpdate();
        foreach (var node in diagram.Nodes)
        {
            if (!node.LayoutInfo.HasSubTree)
            {
                node.LayoutInfo.Orientation = Orientation.Horizontal;
                node.LayoutInfo.Type = SubTreeAlignments.Center;
                node.LayoutInfo.Offset = -50;
            }
        }
        updatePatternSelection("pattern7");
        diagram.EndUpdate();
        diagram.DoLayout();
    }
    private void Pattern8Click()
    {
        diagram.BeginUpdate();
        foreach (var node in diagram.Nodes)
        {
            if (!node.LayoutInfo.HasSubTree)
            {
                node.LayoutInfo.Orientation = Orientation.Horizontal;
                node.LayoutInfo.Type = SubTreeAlignments.Left;
                node.LayoutInfo.Offset = 20;
            }
        }
        updatePatternSelection("pattern8");
        diagram.EndUpdate();
        diagram.DoLayout();
    }
    private void Pattern9Click()
    {
        diagram.BeginUpdate();
        foreach (var node in diagram.Nodes)
        {
            if (!node.LayoutInfo.HasSubTree)
            {
                node.LayoutInfo.Orientation = Orientation.Horizontal;
                node.LayoutInfo.Type = SubTreeAlignments.Right;
                node.LayoutInfo.Offset = 20;
            }
        }
        updatePatternSelection("pattern9");
        diagram.EndUpdate();
        diagram.DoLayout();
    }
    private void updatePatternSelection(string id)
    {
        for (int i = 0; i < pattendict.Count; i++)
        {
            var value = pattendict.Values.ElementAt(i);
            var key = pattendict.Keys.ElementAt(i);
            if (pattendict.ContainsKey(id) && key == id)
            {
                value = selectedPattenitem;
            }
            else
            {
                value = unselecteditem;
            }
            pattendict.Remove(key);
            pattendict.Add(key, value);
        }

        StateHasChanged();
    }
    private void updateSelection(string id)
    {
        for (int i = 0; i < dict.Count; i++)
        {
            var value = dict.Values.ElementAt(i);
            var key = dict.Keys.ElementAt(i);
            if (dict.ContainsKey(id) && key == id)
            {
                value = selectedPattenitem;
            }
            else
            {
                value = unselecteditem;
            }
            dict.Remove(key);
            dict.Add(key, value);
        }

        StateHasChanged();
    }

}
