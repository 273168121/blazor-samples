@page "/Diagrams/Keyboardinteraction"

@using Syncfusion.EJ2.Blazor.Diagrams
@using System.Collections.ObjectModel
@using Syncfusion.EJ2.Blazor.Buttons
@using Syncfusion.EJ2.Blazor.Inputs
@using Syncfusion.EJ2.Blazor.DropDowns
@using Newtonsoft.Json
@inherits SampleBaseComponent;


<style>
    #diagram {
        display: block;
    }

    .row {
        display: block;
    }

    .control-section {
        padding-top: 0px;
        padding-bottom: 0px;
        padding-right: 0px;
        padding-left: 0px;
    }

    .container-fluid {
        padding-left: 0px;
    }

    .property-panel-header {
        padding-bottom: 0px;
    }

    .property-panel-content {
        padding-top: 0px !important;
    }

    @@media (max-width: 550px) {
        .property-panel-content {
            padding-top: 0px !important;
        }
    }

    .sb-property-border {
        border-right: 1px solid #D7D7D7;
    }
</style>

<div class="col-lg-8 control-section sb-property-border">
    <div id="diagram-space" class="content-wrapper">
        <EjsDiagram @ref="@diagram" Width="100%" Height="645px" NodeDefaults="@NodeDefaults" Layout="@Layout" CommandManager="@CommandManager">
            <DiagramSnapSettings Constraints="SnapConstraints.None"></DiagramSnapSettings>
            <DiagramDataSource Id="Id" ParentId="Ancestor" DataSource="@dataSource" DataMapSettings="@datamap"></DiagramDataSource>
            <DiagramEvents OnCommandExecuted="@CommandExecute"></DiagramEvents>
        </EjsDiagram>
    </div>
</div>
<div class="col-lg-3 property-section">
    <div>
        <h4 class="property-panel-header">Built-In Commands</h4>
        <div class="property-panel-content">
            <table id="property1" style="font-size: 12px;">
                <tbody>
                    <tr>
                        <td style="width: 60%;">
                            <h5>Command</h5>
                        </td>
                        <td style="width:40%;">
                            <h5>Gesture</h5>
                        </td>
                    </tr>
                    <tr>
                        <td style="width:61%;">Select All </td>
                        <td style="width:39%;">Ctrl + A</td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Cut</td>
                        <td style="width:40%;">Ctrl + X</td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Copy</td>
                        <td style="width:40%;">Ctrl + C</td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Paste</td>
                        <td style="width:40%;">Ctrl + V</td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Undo</td>
                        <td style="width:40%;">Ctrl + Z</td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Redo</td>
                        <td style="width:40%;">Ctrl + Y</td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Delete</td>
                        <td style="width:40%;">Delete</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div>
        <h4 class="property-panel-header">Custom Commands</h4>
        <div class="property-panel-content">
            <table id="property2" style="font-size: 12px;">
                <tbody>
                    <tr>
                        <td style="width:60%;">
                            <h5>
                                Command
                            </h5>
                        </td>
                        <td style="width:40%;">
                            <h5>Gesture</h5>
                        </td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Group</td>
                        <td style="width:40%;">Ctrl + G</td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Ungroup</td>
                        <td style="width:40%;">Ctrl + U</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div>
        <h4 class="property-panel-header">Modified Commands</h4>
        <div class="property-panel-content">
            <table id="property3" style="font-size: 12px;">
                <tbody>
                    <tr>
                        <td style="width:70%;">
                            <h5>
                                Command
                            </h5>
                        </td>
                        <td style="width:30%;">
                            <h5>Gesture</h5>
                        </td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Navigate to Parent Node </td>
                        <td style="width:40%;">Up Arrow</td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Navigate to Child Node </td>
                        <td style="width:40%;">Down Arrow</td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Navigate to Previous Child </td>
                        <td style="width:40%;">Left Arrow</td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Navigate to Next Child </td>
                        <td style="width:40%;">Right Arrow</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>


@functions
{
    EjsDiagram diagram;
    EjsDropDownList<string, string> mouseMode;
    EjsDropDownList<string, string> Position;
    EjsDropDownList<string, string> Effect;

    DiagramLayout Layout = new DiagramLayout()
    {
        Type = LayoutType.HierarchicalTree
    };

    List<DiagramDataMapSetting> datamap { get; set; } = new List<DiagramDataMapSetting>()
{
            new DiagramDataMapSetting() { Property = "Annotations[0].Content", Field = "Id" },
            new DiagramDataMapSetting() { Property = "Style.Fill", Field = "Fill" }
    };

    DiagramNode NodeDefaults = new DiagramNode
    {
        Width = 70,
        Height = 70,
        Shape = new DiagramShape() { BasicShape = BasicShapes.Ellipse, CornerRadius = 10, Type = Syncfusion.EJ2.Blazor.Diagrams.Shapes.Basic },
        Style = new NodeShapeStyle() { StrokeColor = "transparent" },
        Annotations = new ObservableCollection<DiagramNodeAnnotation>()
{
                new DiagramNodeAnnotation() {
                    Style = new AnnotationStyle() { Color = "white"}
                }
            }
    };


    public class DataModel
    {
        public string Id;
        public string Fill;
        public string Ancestor;
    }

    public object dataSource = new List<object>()
{
        new DataModel{ Id = "A", Fill = "#3498DB" },
        new DataModel{ Id = "B", Ancestor = "A", Fill = "#E74C3C" },
        new DataModel{ Id = "C", Ancestor = "A", Fill = "#E74C3C" },
        new DataModel{ Id = "D", Ancestor = "A", Fill = "#E74C3C" },
        new DataModel{ Id = "E", Ancestor = "B", Fill = "#F39C12" },
        new DataModel{ Id = "F", Ancestor = "B", Fill = "#F39C12" },
        new DataModel{ Id = "G", Ancestor = "F", Fill = "#8E44AD" },
        new DataModel{ Id = "H", Ancestor = "F", Fill = "#8E44AD" },
        new DataModel{ Id = "I", Ancestor = "G", Fill = "#1E8449" },
        new DataModel{ Id = "J", Ancestor = "G", Fill = "#1E8449" }
    };

    public void CommandExecute(ICommandExecuteEventArgs args)
    {
        if (args.Gesture.KeyModifiers == KeyModifiers.Control && args.Gesture.Key == Keys.G)
        {
            diagram.Group();
        }
        if (args.Gesture.KeyModifiers == KeyModifiers.Control && args.Gesture.Key == Keys.U)
        {
            diagram.UnGroup();
        }
        else if (args.Gesture.Key == Keys.Down)
        {
            this.navigateLevels(true);
        }
        else if (args.Gesture.Key == Keys.Up)
        {
            this.navigateLevels(false);
        }
        else if (args.Gesture.Key == Keys.Right)
        {
            this.navigateToSiblings(true);
        }
        else if (args.Gesture.Key == Keys.Left)
        {
            this.navigateToSiblings(false);
        }

    }

    Syncfusion.EJ2.Blazor.Diagrams.DiagramCommandManager CommandManager = new Syncfusion.EJ2.Blazor.Diagrams.DiagramCommandManager()
    {
        Commands = new List<DiagramCommand>() {
            new DiagramCommand()
            {
                Name = "customGroup",
                Gesture = new DiagramKeyGesture()
                {
                    Key = Keys.G,
                    KeyModifiers = KeyModifiers.Control
                },

            },
            new DiagramCommand()
            {
                Name = "customUnGroup",
                Gesture = new DiagramKeyGesture()
                {
                    Key = Keys.U,
                    KeyModifiers = KeyModifiers.Control
                },
            },
            new DiagramCommand()
            {
                Name = "navigationDown",
                Gesture = new DiagramKeyGesture()
                {
                    Key = Keys.Down
                },
            },
            new DiagramCommand()
            {
                Name = "navigationUp",
                Gesture = new DiagramKeyGesture()
                {
                    Key = Keys.Up
                },
            },
            new DiagramCommand()
            {
                Name = "navigationLeft",
                Gesture = new DiagramKeyGesture()
                {
                    Key = Keys.Left
                },
            },
            new DiagramCommand()
            {
                Name = "navigationRight",
                Gesture = new DiagramKeyGesture()
                {
                    Key = Keys.Right
                },
            },
        }
    };

    //Get node elements
    private async Task<List<DiagramNode>> getNode(string name, bool isParent)
    {
        List<DiagramNode> nodes = new List<DiagramNode>();
        DiagramNode node;
        DiagramConnector connector = diagram.GetConnector(name);
        if (connector != null)
        {
            string Id = (isParent ? connector.SourceID : connector.TargetID);
            node = diagram.GetNode(Id);
            nodes.Add(node);
        }
        return nodes;
    }

    private void SelectNode(List<DiagramNode> node)
    {
        if (node != null && node.Count > 0)
        {
            diagram.ClearSelection();
            diagram.Select(node);
        }
    }

    private async void navigateLevels(Boolean isParent)
    {
        if (diagram.SelectedItems.Nodes.Count > 0)
        {
            DiagramNode node = diagram.SelectedItems.Nodes[0] as DiagramNode;
            if (node.Id != "")
            {
                string[] edges = isParent ? await diagram.getEdges(node.Id, true) : await diagram.getEdges(node.Id, false);
                if (edges.Length > 0)
                {
                    string connectorId = edges[0];
                    List<DiagramNode> altNode = await this.getNode(connectorId, (isParent ? false : true)) as List<DiagramNode>;
                    this.SelectNode(altNode);
                }
            }
        }
    }

    private async void navigateToSiblings(bool isRightSibling)
    {
        if (diagram.SelectedItems.Nodes.Count > 0)
        {
            DiagramNode child = diagram.SelectedItems.Nodes[0] as DiagramNode;
            if (child != null)
            {
                string[] edgeCol = await diagram.getEdges(child.Id, false);
                if (edgeCol.Length > 0)
                {
                    string connectorId = edgeCol[0];
                    string altConnectorId = "";
                    List<DiagramNode> parent = await this.getNode(connectorId, true);
                    if (parent != null && parent.Count > 0)
                    {
                        string[] edges = await diagram.getEdges(parent[0].Id, true);
                        for (int i = 0; i < edges.Length; i++)
                        {
                            if (edges[i] == connectorId)
                            {
                                if ((isRightSibling && edges.Length - 1 >= i + 1) || (!isRightSibling && i - 1 >= 0))
                                {
                                    altConnectorId = isRightSibling ? edges[i + 1] : edges[i - 1];
                                }
                            }
                        }
                        List<DiagramNode> sibling = await this.getNode(altConnectorId, false);
                        this.SelectNode(sibling);
                    }
                }
            }
        }
    }
}