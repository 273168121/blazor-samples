@page "/Diagrams/Annotations"

@using Syncfusion.EJ2.Blazor.Diagrams
@using System.Collections.ObjectModel
@using Syncfusion.EJ2.Blazor.Buttons
@using Syncfusion.EJ2.Blazor.Inputs
@using Syncfusion.EJ2.Blazor.DropDowns
@inherits SampleBaseComponent;
@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Annotations";
    SampleBrowser.CurrentControlName = "Diagram";
    SampleBrowser.CurrentControlCategory = "Diagram";
    SampleBrowser.TitleTag = "Diagram . Annotations . Syncfusion Blazor Components - Preview";
    SampleBrowser.MetaDescription = "This demo for EJ2 Blazor Diagram control is illustrated by five forces chart. Customizing the position/appearance of the annotation is also illustrated.";
    SampleBrowser.CurrentControl = SampleBrowser.Config.Diagram;
    SampleBrowser.ActionDescription = new string[] {
        @" <p>
            This sample illustrates the competitive environment of a business through five forces chart. The elements of the five force chart is described using nodes and annotations. Customizing the position and appearance of the annotation is illustrated in this example.
        </p>"
    };
    SampleBrowser.Description = new string[] {
       @"<p>
            This example shows how to add textual descriptions to shapes and how to position them over the shapes. The <code>annotations</code> property of the node can be used to add descriptions.

        </p>
        <p>
             The <code>Offset</code>, <code>HorizontalAlignment</code>, and<code>VerticalAlignment</code> properties of the
        annotation can be used to customize the position of the descriptions. The <code>Bold</code>,<code>Italic</code>,
        <code>FontSize</code>, and <code>FontFamily</code> properties can be used to customize the appearance of the
        descriptions.

        </p>
        <p>
            To change the position of the descriptions, select a node and choose the template in the property panel.
        </p>
        <br>"
    };
}
@*End:Hidden*@

<div class="col-lg-8 control-section sb-property-border">
    @*Hidden:Lines*@
    <style>
        .image-pattern-style {
            background-color: white;
            background-size: contain;
            background-repeat: no-repeat;
            height: 50px;
            width: calc((100% - 18px) / 3);
            cursor: pointer;
            border: 1px solid #D5D5D5;
            background-position: center;
            float: left;
        }

        .sb-property-border {
            border-right: 1px solid #D7D7D7;
        }

        .property-panel-header {
            padding-top: 15px;
            padding-bottom: 5px;
            font-weight: 600;
            font-size: 15px;
        }

        .image-pattern-style:hover {
            border-color: gray;
            border-width: 2px;
        }

        .e-remove-selection .property-section-content {
            pointer-events: none;
        }

        .column-style {
            display: table;
            height: 35px;
            padding-right: 4px;
            padding-left: 0px;
            width: calc((100% - 12px) / 3);
        }

        .row {
            margin-left: 0px;
            margin-right: 0px;
            display: block;
        }

        .row-header {
            font-size: 13px;
            font-weight: 600;
        }

        .e-checkbox-wrapper .e-label {
            font-size: 12px;
        }

        .e-selected-style {
            border-color: #006CE6;
            border-width: 2px;
        }

        .col-xs-6 {
            padding-left: 0px;
            padding-right: 0px;
            padding-top: 5px;
        }

        .property-section .e-remove-selection {
            cursor: not-allowed;
        }

        @@font-face {
            font-family: 'e-ddb-icons';
            src: url(data:application/x-font-ttf;charset=utf-8;base64,) format('truetype');
            font-weight: normal;
            font-style: normal;
        }

        .e-ddb-icons {
            font-family: 'e-ddb-icons';
            speak: none;
            font-size: 55px;
            font-style: normal;
            font-weight: normal;
            font-variant: normal;
            text-transform: none;
            line-height: 1;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        .e-bold::before {
            content: "\e712";
        }

        .e-italic::before {
            content: "\e717";
        }

        .e-underline::before {
            content: "\e716";
        }

        .material .e-bold::before {
            content: "\e707";
        }

        .material .e-italic::before {
            content: "\e70b";
        }

        .material .e-underline::before {
            content: "\e702";
        }

        .bootstrap .e-bold::before {
            content: "\e71f";
        }

        .bootstrap .e-italic::before {
            content: "\e723";
        }

        .bootstrap .e-underline::before {
            content: "\e71a";
        }

        #bold, #italic, #underline {
            width: 100%;
        }

        .e-btn {
            box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0), 0 2px 2px 0 rgba(0, 0, 0, 0), 0 1px 5px 0 rgba(0, 0, 0, 0);
        }

        .e-bigger .e-btn.e-small.e-icon-btn {
            padding: 0px;
        }
    </style>
    @*End:Hidden*@


    <div id="diagram-space" class="content-wrapper">
        <EjsDiagram Width="100%" Height="@Height" Constraints="@Constraints" SnapSettings="@SnapSettings" @ref="@diagram" Nodes="@NodeCollection" Connectors="@ConnectorCollection">
            <DiagramEvents SelectionChanged="@SelectionChange"></DiagramEvents>
            <DiagramPageSettings FitOptions="@FitOptions"></DiagramPageSettings>
        </EjsDiagram>
    </div>
</div>
<div class="col-lg-4 property-section">
    <div class="property-panel-header">
        Properties
    </div>
    <div class="@appearance">
        <div class="row property-panel-content" id="appearance">
            <div class="row row-header" style="padding-top: 10px">
                Alignment
            </div>
            <div class="row">
                <div class="row" style="padding-top: 8px">
                    <div class="@dict["left"]" id="left" @onclick="@(() => UpdatePosition("left"))" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/annotation/Annotation_1.png); margin-right: 4px">
                    </div>
                    <div class="@dict["right"]" id="right" @onclick="@(() => UpdatePosition("right"))" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/annotation/Annotation_2.png); margin: 0px 4px">
                    </div>
                    <div class="@dict["bottoml"]" id="bottoml" @onclick="@(() => UpdatePosition("bottoml"))" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/annotation/Annotation_3.png);margin-left: 4px">
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="@dict["bottomr"]" id="bottomr" @onclick="@(() => UpdatePosition("bottomr"))" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/annotation/Annotation_4.png); margin-right: 4px">
                    </div>
                    <div class="@dict["center"]" id="center" @onclick="@(() => UpdatePosition("center"))" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/annotation/Annotation_5.png); margin: 0px 4px">
                    </div>
                    <div class="@dict["bottomcenter_top"]" id="bottomcenter_top" @onclick="@(() => UpdatePosition("bottomcenter_top"))" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/annotation/Annotation_6.png);margin-left: 4px">
                    </div>
                </div>
            </div>
        </div>
        <div class="row property-panel-content" style="padding-top: 10px">
            <div class="row row-header" style="padding-top: 10px">
                Appearance
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="col-xs-4 column-style">
                    <EjsButton id="bold" OnClick="FontBold" CssClass="boldwidth button" iconCss="e-ddb-icons e-bold"></EjsButton>
                </div>
                <div class="col-xs-4 column-style">
                    <EjsButton id="italic" OnClick="FontItalic" CssClass="boldwidth button" iconCss="e-ddb-icons e-italic"></EjsButton>
                </div>
                <div class="col-xs-4 column-style">
                    <EjsButton id="underline" OnClick="FontUnderLine" CssClass="boldwidth button" iconCss="e-ddb-icons e-underline"></EjsButton>

                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="col-xs-4 column-style">
                    <EjsColorPicker CssClass="button" id="fontColor" Value="#000" ValueChange="@FontColorChange"></EjsColorPicker>
                </div>
                <div class="col-xs-4 column-style">
                    <EjsNumericTextBox id="fontSize" Value="12" Min="1" Max="50" Enabled="true" Format="##.##" Step="1" Width="100%" CssClass="textboxstyle">
                        <NumericTextBoxEvents TValue="int" ValueChange="@FontSizeChange"></NumericTextBoxEvents>
                    </EjsNumericTextBox>
                </div>
                <div class="col-xs-4 column-style">
                    <EjsDropDownList TValue="@string" TItem="@FontFamily" Index="0" ID="fontFamily" Enabled="true" Placeholder="Select a font type" CssClass="textboxstyle" PopupWidth="150" DataSource="@FontFamilyLists">
                        <DropDownListEvents TValue="string" ValueChange="FontChange"></DropDownListEvents>
                        <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                    </EjsDropDownList>
                </div>
            </div>
        </div>

        <div class="row property-panel-content" style="padding-top: 10px">
            <div class="row row-header">
                Behaviour
            </div>
            <div class="row" style="padding-top: 8px">
                <EjsCheckBox ID="labelConstraints" Label="Label interaction" Checked="false" @onchange="OnLabelInteractionChange"></EjsCheckBox>
            </div>
        </div>
    </div>

</div>

@code{
    string appearance = "e-remove-selection";
    static string selecteditem = "image-pattern-style e-selected-style";
    static string unselecteditem = "image-pattern-style";
    Dictionary<string, string> dict = new Dictionary<string, string>() { { "left", unselecteditem }, { "right", unselecteditem }, { "center", unselecteditem }, { "bottomr", unselecteditem }, { "bottoml", unselecteditem }, { "bottomcenter_top", unselecteditem } };
    EjsDiagram diagram;

    public string Height { get; set; } = "645px";
    public DiagramConstraints Constraints { get; set; }
    public DiagramSnapSettings SnapSettings { get; set; }


    public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();

    public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();

    DiagramFitOptions FitOptions = new DiagramFitOptions()
    {
        CanFit = true,
        Mode = FitModes.Page

    };

    protected override void OnInitialized()
    {

        Constraints = DiagramConstraints.Default;
        SnapSettings = new DiagramSnapSettings() { Constraints = SnapConstraints.None };
        DiagramNode node1 = createNode("industry", 300, 250, "Industry Competitors");
        DiagramNode node2 = createNode("potential", 300, 110, "Potential Entrants");
        DiagramNode node3 = createNode("suplier", 110, 250, "Suppliers");
        DiagramNode node4 = createNode("substitutes", 300, 390, "Substitutes");
        DiagramNode node5 = createNode("buyers", 490, 250, "Buyers");

        createConnector("connector1", "potential", "industry");
        createConnector("connector2", "suplier", "industry");
        createConnector("connector3", "substitutes", "industry");
        createConnector("connector4", "buyers", "industry");
        DiagramConnector connector1 = createConnector("connector5", "potential", "buyers");
        updateSegments(connector1, Direction.Right, 60);
        DiagramConnector connector2 = createConnector("connector6", "buyers", "substitutes");
        updateSegments(connector2, Direction.Bottom, 100);
        DiagramConnector connector3 = createConnector("connector7", "substitutes", "suplier");
        updateSegments(connector3, Direction.Left, 60);
        DiagramConnector connector4 = createConnector("connector8", "suplier", "potential");
        updateSegments(connector4, Direction.Top, 100);


    }


    public DiagramNode createNode(string id, double offx, double offy, string content)
    {
        DiagramNode node = new DiagramNode()
        {
            Id = id,
            OffsetX = offx,
            OffsetY = offy,
            Height = 50,
            Width = 130,
            Shape = new DiagramShape() { Type = Syncfusion.EJ2.Blazor.Diagrams.Shapes.Basic, BasicShape = BasicShapes.Rectangle, CornerRadius = 5 },
            Style = new NodeShapeStyle() { Fill = "#D5EDED", StrokeColor = "#7DCFC9", StrokeWidth = 1 }
        };

        DiagramNodeAnnotation annotation = new DiagramNodeAnnotation()
        {
            Content = content,
            Style = new AnnotationStyle() { Color = "Black" }
        };
        node.Annotations = new ObservableCollection<DiagramNodeAnnotation>()
{
            annotation
        };
        NodeCollection.Add(node);
        return node;
    }


    public DiagramConnector createConnector(string id, string sourceid, string targetid)
    {
        DiagramConnector connector = new DiagramConnector()
        {
            Id = id,
            SourceID = sourceid,
            TargetID = targetid,
            Type = Syncfusion.EJ2.Blazor.Diagrams.Segments.Orthogonal,
            Constraints = ConnectorConstraints.None,
        };
        ConnectorCollection.Add(connector);
        return connector;
    }
    public void updateSegments(DiagramConnector connector, Direction direction, double length)
    {
        connector.Segments = new ObservableCollection<DiagramConnectorSegment>()
{
            new DiagramConnectorSegment()
            {
             Direction=direction,Type=Syncfusion.EJ2.Blazor.Diagrams.Segments.Orthogonal,Length=length
            }
        };
        connector.TargetDecorator = new ConnectorTargetDecorator() { Shape = DecoratorShapes.None };
    }

    private List<object> orthoSegment1 { get; set; } = new List<object>{
        new  { direction= "Right", type= "Orthogonal", length= 60 }
    };
    private List<object> orthoSegment2 { get; set; } = new List<object>{
        new  { direction= "Bottom", type= "Orthogonal", length= 100 }
    };
    private List<object> orthoSegment3 { get; set; } = new List<object>{
        new  { direction= "Left", type= "Orthogonal", length= 60 }
    };
    private List<object> orthoSegment4 { get; set; } = new List<object>{
        new  { direction= "Top", type= "Orthogonal", length= 100 }
    };

    private void OnLabelInteractionChange()
    {
        UpdateAnnotation("interaction", 0);
    }
    private void FontBold()
    {
        UpdateAnnotation("bold", true);
        StateHasChanged();
    }

    private void FontItalic()
    {
        UpdateAnnotation("italic", true);
    }
    private void FontUnderLine()
    {
        UpdateAnnotation("underline", true);
    }
    private void FontChange(Syncfusion.EJ2.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        UpdateAnnotation("fontfamily", args.Value);
    }
    private void FontSizeChange(Syncfusion.EJ2.Blazor.Inputs.ChangeEventArgs args)
    {
        UpdateAnnotation("fontsize", args.Value);
    }

    public class GetCurrentValue
    {
        public string hex { get; set; }
        public string rgba { get; set; }
    }
    public string StyleValue = "background-color:#008000";
    public GetCurrentValue ColorValue { get; set; }

    private void FontColorChange(ColorPickerEventArgs args)
    {
        this.ColorValue = ((Newtonsoft.Json.Linq.JObject)args.CurrentValue).ToObject<GetCurrentValue>();
        this.StyleValue = "background-color:" + this.ColorValue.hex;
        UpdateAnnotation("fontcolor", this.ColorValue.hex);
    }
    private void TemplateChange(Syncfusion.EJ2.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        UpdateAnnotation("template", args.Value);
    }
    private void UpdateAnnotation(string name, object value)
    {
        for (var i = 0; i < diagram.SelectedItems.Nodes.Count; i++)
        {
            var node = diagram.SelectedItems.Nodes[i];
            for (var j = 0; j < node.Annotations.Count; j++)
            {
                var annotationStyle = node.Annotations[j].Style;
                if (name == "fontsize")
                {
                    annotationStyle.FontSize = Double.Parse(value.ToString());
                }
                else if (name == "underline")
                {
                    annotationStyle.TextDecoration = annotationStyle.TextDecoration == TextDecoration.Underline ? TextDecoration.None : TextDecoration.Underline;
                }
                else if (name == "fontfamily")
                {
                    annotationStyle.FontFamily = value.ToString();
                }
                else if (name == "bold")
                {
                    if (annotationStyle.Bold)
                        annotationStyle.Bold = false;
                    else
                        annotationStyle.Bold = true;
                }
                else if (name == "italic")
                {
                    if (annotationStyle.Italic)
                        annotationStyle.Italic = false;
                    else
                        annotationStyle.Italic = true;
                }
                else if (name == "fontcolor")
                {
                    annotationStyle.Color = value.ToString();
                }
                else if (name == "template")
                {
                    if (value.ToString() == "none")
                    {
                        node.Annotations[j].Template = null;
                        node.Annotations[j].Width = 0;
                        node.Annotations[j].Height = 0;
                    }
                    else
                    {
                        node.Annotations[j].Width = 25;
                        node.Annotations[j].Height = 25;
                        //node.annotations[j].template =
                        //    "<img src="../images/Diagram/annotation/" + value + ".svg" style="width:100%;height:100%" />";
                    }
                }
                else if (name == "interaction")
                {
                    node.Annotations[j].Constraints = node.Annotations[j].Constraints ^ AnnotationConstraints.Interaction;
                }
                StateHasChanged();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //OnAfterRenderAsync will be triggered after the component rendered.
            await Task.Delay(500);
            diagram.Select(new ObservableCollection<DiagramNode>() { diagram.Nodes[0] }, null);
            StateHasChanged();
        }
    }

    private void SelectionChange(IBlazorSelectionChangeEventArgs arg)
    {
        if (arg.State == EventState.Changed)
        {
            DiagramNode node = null;
            if (arg.NewValue.Nodes != null && arg.NewValue.Nodes.Count > 0)
            {
                node = diagram.GetNode(arg.NewValue.Nodes[0].Id);
            }

            if (node != null)
            {
                List<DiagramNodeAnnotation> annotations = (node.Annotations as ObservableCollection<DiagramNodeAnnotation>).ToList();
                NodeAnnotationOffset offset = annotations[0].Offset;
                if (offset.X == 0 && offset.Y == 0)
                {
                    UpdatePosition("left", arg.NewValue.Nodes);
                }
                else if (offset.X == 1 && offset.Y == 0)
                {
                    UpdatePosition("right", arg.NewValue.Nodes);
                }
                else if (offset.X == 0 && offset.Y == 1)
                {
                    UpdatePosition("bottoml", arg.NewValue.Nodes);
                }
                else if (offset.X == 1 && offset.Y == 1)
                {
                    UpdatePosition("bottomr", arg.NewValue.Nodes);
                }
                else if (offset.X == 0.5 && offset.Y == 0.5)
                {
                    UpdatePosition("center", arg.NewValue.Nodes);
                }
                else if (offset.X == 0.5 && offset.Y == 1)
                {
                    UpdatePosition("bottomcenter_top", arg.NewValue.Nodes);
                }
            }
            EnableOptions(arg);
        }
    }
    private void UpdatePosition(string id, List<NodeModel> Nodes)
    {
        for (int i = 0; i < Nodes.Count; i++)
        {
            DiagramNode node = diagram.GetNode(Nodes[i].Id);
            for (int j = 0; j < node.Annotations.Count; j++)
            {
                DiagramNodeAnnotation annotation = node.Annotations[j] as DiagramNodeAnnotation;
                updateAnnotation(id, annotation);
            }
        }
    }
    //Update the Annotation Position based on the selection
    private void UpdatePosition(string id)
    {
        for (int i = 0; i < diagram.SelectedItems.Nodes.Count; i++)
        {
            DiagramNode node = diagram.SelectedItems.Nodes[i] as DiagramNode;
            for (int j = 0; j < node.Annotations.Count; j++)
            {
                DiagramNodeAnnotation annotation = node.Annotations[j] as DiagramNodeAnnotation;
                updateAnnotation(id, annotation);
            }
        }
    }
    private void updateAnnotation(string id, DiagramNodeAnnotation annotation)
    {
        switch (id)
        {
            case "left":
                setAnnotationPosition(annotation, 0, 0, VerticalAlignment.Top, HorizontalAlignment.Left);
                break;
            case "right":
                setAnnotationPosition(annotation, 1, 0, VerticalAlignment.Top, HorizontalAlignment.Right);
                break;
            case "bottoml":
                setAnnotationPosition(annotation, 0, 1, VerticalAlignment.Bottom, HorizontalAlignment.Left);
                break;
            case "bottomr":
                setAnnotationPosition(annotation, 1, 1, VerticalAlignment.Bottom, HorizontalAlignment.Right);
                break;
            case "center":
                setAnnotationPosition(annotation, 0.5f, .5f, VerticalAlignment.Center, HorizontalAlignment.Center);
                break;
            case "bottomcenter_top":
                setAnnotationPosition(annotation, 0.5f, 1, VerticalAlignment.Top, HorizontalAlignment.Center);
                break;
        }
        updateSelection(id);
    }
    private void updateSelection(string id)
    {
        for (int i = 0; i < dict.Count; i++)
        {
            var value = dict.Values.ElementAt(i);
            var key = dict.Keys.ElementAt(i);
            if (dict.ContainsKey(id) && key == id)
            {
                value = selecteditem;
            }
            else
            {
                value = unselecteditem;
            }
            dict.Remove(key);
            dict.Add(key, value);
        }

        StateHasChanged();
    }

    //set the Annotation Position
    private void setAnnotationPosition(DiagramNodeAnnotation annotation, float offsetX, float offsetY, VerticalAlignment vAlignment, HorizontalAlignment hAlignment)
    {
        annotation.Offset.X = offsetX;
        annotation.Offset.Y = offsetY;
        annotation.VerticalAlignment = vAlignment;
        annotation.HorizontalAlignment = hAlignment;
        if (vAlignment == VerticalAlignment.Top && hAlignment == HorizontalAlignment.Left)
        {
            annotation.Margin = new NodeAnnotationMargin() { Left = 3, Top = 3 };
        }
        else if (vAlignment == VerticalAlignment.Top && hAlignment == HorizontalAlignment.Right)
        {
            annotation.Margin = new NodeAnnotationMargin() { Right = 3, Top = 3 };
        }
        else if (vAlignment == VerticalAlignment.Bottom && hAlignment == HorizontalAlignment.Left)
        {
            annotation.Margin = new NodeAnnotationMargin() { Left = 3, Bottom = 3 };
        }
        else if (vAlignment == VerticalAlignment.Bottom && hAlignment == HorizontalAlignment.Right)
        {
            annotation.Margin = new NodeAnnotationMargin() { Right = 3, Bottom = 3 };
        }
    }
    //Enable or disable the property panel
    private void EnableOptions(IBlazorSelectionChangeEventArgs arg)
    {
        if (arg.NewValue != null)
        {
            if (arg.NewValue.Nodes != null && arg.NewValue.Nodes.Count > 0)
            {
                appearance = "e-remove-selection";
            }
            else
            {
                appearance = "";
                updateSelection("");
            }
        }
    }



    public class TemplateList
    {
        public string Value { get; set; }
        public string Text { get; set; }
    }

    private List<TemplateList> TemplateLists = new List<TemplateList>() {
        new TemplateList() { Value = "none", Text = "None" },
        new TemplateList() { Value = "industry", Text = "Industry Competitors" },
        new TemplateList() { Value = "suppliers", Text = "Suppliers" },
        new TemplateList() { Value = "potential", Text = "Potential Entrants" },
        new TemplateList() { Value = "buyers", Text = "Buyers" },
        new TemplateList() { Value = "substitutes", Text = "Substitutes" },
    };

    public class FontFamily
    {
        public string Name { get; set; }
    }
    private List<FontFamily> FontFamilyLists = new List<FontFamily>() {
        new FontFamily() { Name ="Arial"},
        new FontFamily() { Name ="Aharoni" },
        new FontFamily() { Name ="Bell MT"},
        new FontFamily() { Name = "Fantasy" },
        new FontFamily() { Name ="Times New Roman" },
        new FontFamily() { Name ="Segoe UI" },
        new FontFamily() { Name ="Verdana" },
    };

}