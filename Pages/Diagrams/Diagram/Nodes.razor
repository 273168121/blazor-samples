@page "/Diagrams/Nodes"

@using Syncfusion.EJ2.Blazor.Diagrams
@using Syncfusion.EJ2.Blazor.Buttons
@using System.Collections.ObjectModel
@inherits SampleBaseComponent;

<div class="col-lg-8 control-section" style="border-right: 1px solid #D7D7D7">
    <div id="diagram-space" class="content-wrapper">
        <EjsDiagram @ref="@diagram" id="diagram" Width="100%" Height="690px" Nodes="@NodeCollection" Connectors="@ConnectorCollection" NodeDefaults="@NodeDefaults" ConnectorDefaults="@ConnectorDefault">
            <DiagramSnapSettings Constraints="SnapConstraints.None"></DiagramSnapSettings>
            <DiagramPageSettings FitOptions="@FitOptions"></DiagramPageSettings>
        </EjsDiagram>
    </div>
</div>

<div class="col-lg-4 property-section">
    @*Hidden:Lines*@
    <style>

        .image-pattern-style {
            background-color: white;
            background-size: contain;
            background-repeat: no-repeat;
            height: 75px;
            width: calc((100% - 12px) / 3);
            cursor: pointer;
            border: 1px solid #D5D5D5;
            background-position: center;
            float: left;
        }

            .image-pattern-style:hover {
                border-color: gray;
                border-width: 2px;
            }

        .row {
            margin-left: 0px;
            margin-right: 0px;
        }

        .row-header {
            font-size: 13px;
            font-weight: 600;
        }

        .property-panel-header {
            padding-top: 15px;
            padding-bottom: 5px;
            font-weight: 600;
        }

        .e-selected-style {
            border-color: #006CE6;
            border-width: 2px;
        }

        .e-checkbox-wrapper .e-label {
            font-size: 12px;
        }


        .row {
            display: block;
        }
    </style>
    @*End:Hidden*@
    <div class="property-panel-header">
        Properties
    </div>
    <div class="row-property-panel-content" style="padding-top: 10px" id="appearance">
        <div class="row row-header">
            Appearance
        </div>
        <div class="row" style="padding-top: 8px">
            <div class="@dict["preview0"]" @onclick="@preview0" id="preview0" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/node/Nodes_1.png); margin-right: 3px">
            </div>
            <div class="@dict["preview1"]" @onclick="@preview1" id="preview1" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/node/Nodes_2.png); margin-right: 3px">
            </div>
            <div class="@dict["preview2"]" @onclick="@preview2" id="preview2" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/node/Nodes_3.png); margin-right: 3px">
            </div>
        </div>
        <div class="row" style="padding-top: 8px">
            <div class="@dict["preview3"]" @onclick="@preview3" id="preview3" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/node/Nodes_4.png); margin:3px 3px 0px 0px">
            </div>
            <div class="@dict["preview4"]" @onclick="@preview4" id="preview4" style="background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/node/Nodes_5.png); margin:3px 3px 0px 0px">
            </div>
        </div>
    </div>

    <div class="row property-panel-content" style="padding-top: 10px">
        <div class="row row-header">
            Behaviour
        </div>
        <div class="row" style="padding-top: 8px">
            <EjsCheckBox ID="aspectRatio" Checked="false" Label="Aspect ratio" ValueChange="@CheckBoxChanged">

            </EjsCheckBox>

        </div>
        <div class="row" style="padding-top: 8px">
            <EjsCheckBox ID="lock" Checked="false" Label="Lock" ValueChange="@LockChanged">

            </EjsCheckBox>

        </div>
    </div>
</div>

@functions{
    double width = 100;
    EjsDiagram diagram;
    static string seleceditem = "image-pattern-style e-selected-style";
    static string unseleceditem = "image-pattern-style";
    DiagramFitOptions FitOptions = new DiagramFitOptions()
    {
        CanFit = true,
        Mode = FitModes.Page

    };
    Dictionary<string, string> dict = new Dictionary<string, string>() { { "preview0", unseleceditem }, { "preview1", unseleceditem }, { "preview2", unseleceditem }, { "preview3", unseleceditem }, { "preview4", unseleceditem } };
    DiagramConnector ConnectorDefault = new DiagramConnector()
    {
        TargetDecorator = new ConnectorTargetDecorator() { Shape = DecoratorShapes.Arrow, Style = new DecoratorShapeStyle() { Fill = "#024249", StrokeColor = "#024249" } },
        Style = new ConnectorShapeStyle() { StrokeColor = "#6d6d6d", StrokeWidth = 2 }
    };
    DiagramNode NodeDefaults = new DiagramNode()
    {
        Width = 100,
        Height = 100,
        Shape = new DiagramShape() { Type = Syncfusion.EJ2.Blazor.Diagrams.Shapes.Basic, BasicShape = BasicShapes.Ellipse },
        Style = new NodeShapeStyle()
        {
            Fill = "#37909A",
            StrokeColor = "#024249",
        },
        Constraints = NodeConstraints.Default,
        Annotations = new ObservableCollection<DiagramNodeAnnotation>()
{
            new DiagramNodeAnnotation()
            {
                Margin = new NodeAnnotationMargin(){Left=0,Right=0 }, Style = new AnnotationStyle()
                { Color = "white" }
            },
        },
    };
    public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();

    public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();

    protected override void OnInitialized()
    {

        DiagramNode node1 = createNode("sdlc", 300, 288, "SDLC");
        DiagramNode node2 = createNode("support", 150, 250, "Support");
        DiagramNode node3 = createNode("analysis", 300, 150, "Analysis");
        DiagramNode node4 = createNode("design", 450, 250, "Design");
        DiagramNode node5 = createNode("implement", 400, 400, "Implement");
        DiagramNode node6 = createNode("deploy", 200, 400, "Deploy");
        createConnector("connector1", "analysis", "design");
        createConnector("connector2", "design", "implement");
        createConnector("connector3", "implement", "deploy");
        createConnector("connector4", "deploy", "support");
        createConnector("connector5", "support", "analysis");

    }
    public DiagramConnector createConnector(string id, string sourceid, string targetid)
    {
        DiagramConnector connector = new DiagramConnector()
        {
            Id = id,
            SourceID = sourceid,
            TargetID = targetid,

        };
        ConnectorCollection.Add(connector);
        return connector;
    }
    public DiagramNode createNode(string id, double offx, double offy, string content)
    {
        DiagramNode node = new DiagramNode()
        {
            Id = id,
            OffsetX = offx,
            OffsetY = offy,
        };

        DiagramNodeAnnotation annotation = new DiagramNodeAnnotation()
        {
            Content = content,
        };
        node.Annotations = new ObservableCollection<DiagramNodeAnnotation>()
{
            annotation
        };
        NodeCollection.Add(node);
        return node;
    }
    private void AppearanceSelect(string id)
    {
        diagram.BeginUpdate();
        for (var i = 0; i < diagram.Nodes.Count; i++)
        {
            DiagramNode node = diagram.Nodes[i];
            switch (id)
            {
                case "preview0":
                    applyNodeStyle(node, 0, "", ~NodeConstraints.Shadow, GradientType.None, id);
                    break;
                case "preview1":
                    applyNodeStyle(node, 2, "", ~NodeConstraints.Shadow, GradientType.None, id);
                    break;
                case "preview2":
                    applyNodeStyle(node, 2, "5,5", ~NodeConstraints.Shadow, GradientType.None, id);
                    break;
                case "preview3":
                    applyNodeStyle(node, 2, "5,5", ~NodeConstraints.Shadow, GradientType.Radial, id);
                    break;
                case "preview4":
                    applyNodeStyle(node, 2, "5,5", NodeConstraints.Shadow, GradientType.None, id);
                    break;
            }

        }
        diagram.EndUpdate();

    }

    private void preview0()
    {
        AppearanceSelect("preview0");
    }
    private void preview1()
    {
        AppearanceSelect("preview1");
    }
    private void preview2()
    {
        AppearanceSelect("preview2");
    }
    private void preview3()
    {
        AppearanceSelect("preview3");
    }
    private void preview4()
    {
        AppearanceSelect("preview4");
    }

    private void applyNodeStyle(DiagramNode node, float width, string array, NodeConstraints con, GradientType type, string Id)
    {
        node.Style = new NodeShapeStyle()
        {
            Fill = "#37909A",
            StrokeWidth = width,
            StrokeColor = "#024249",
            StrokeDashArray = array
        };

        if (type == GradientType.None)
        {
            node.Style.Gradient.Type = GradientType.None;
        }
        else
        {
            DiagramGradient gradient = new DiagramGradient()
            {
                Cx = 50,
                Cy = 50,
                Fx = 50,
                Fy = 50,
                Stops = new ObservableCollection<DiagramsGradientStop>()
{
                    new DiagramsGradientStop() { Color = "#00555b", Offset = 45 },
                    new DiagramsGradientStop() { Color= "#37909A", Offset= 90 }
                },
                Type = GradientType.Radial
            };

            node.Style.Gradient = gradient;
        }

        if (!(con.HasFlag(NodeConstraints.Shadow)))
        {
            node.Shadow = new DiagramShadow() { Angle = 45, Distance = 15, Opacity = 0.3, Color = "grey" };
            node.Constraints &= con;
        }
        else
        {
            node.Constraints |= con;
        }

        updateSelection(Id);

    }

    private void updateSelection(string id)
    {
        for (int i = 0; i < dict.Count; i++)
        {
            var value = dict.Values.ElementAt(i);
            var key = dict.Keys.ElementAt(i);
            if (dict.ContainsKey(id) && key == id)
            {
                value = seleceditem;
            }
            else
            {
                value = unseleceditem;
            }
            dict.Remove(key);
            dict.Add(key, value);
        }

        StateHasChanged();
    }

    private void CheckBoxChanged(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        for (int i = 0; i < diagram.Nodes.Count; i++)
        {
            if (args.Checked)
            {
                diagram.Nodes[i].Constraints = diagram.Nodes[i].Constraints | NodeConstraints.AspectRatio;
            }
            else
            {
                diagram.Nodes[i].Constraints = diagram.Nodes[i].Constraints & ~NodeConstraints.AspectRatio;
            }
        }
    }

    private void LockChanged(Syncfusion.EJ2.Blazor.Buttons.ChangeEventArgs args)
    {
        for (int i = 0; i < diagram.Nodes.Count; i++)
        {
            if (args.Checked)
            {
                diagram.Nodes[i].Constraints = diagram.Nodes[i].Constraints & ~(NodeConstraints.Resize | NodeConstraints.Drag | NodeConstraints.Rotate);
                diagram.Nodes[i].Constraints = diagram.Nodes[i].Constraints | NodeConstraints.ReadOnly;
            }
            else
            {
                diagram.Nodes[i].Constraints = diagram.Nodes[i].Constraints | NodeConstraints.Default & ~(NodeConstraints.ReadOnly);
            }
        }
    }
}
