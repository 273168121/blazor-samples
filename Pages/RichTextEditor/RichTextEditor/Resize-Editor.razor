
@page "/rich-text-editor/resize-editor"

@using Syncfusion.Blazor.RichTextEditor

@inherits SampleBaseComponent;

<SampleDescription>
    <p>This sample demonstrates the resize operation of the Rich Text Editor control. To resize the rich text editor, select and resize the editor using its handle (grip) at the bottom right corner of the content panel.</p>
</SampleDescription>
<ActionDescription>
   <p>Users can create resizable Rich Text Editor by setting the <code>EnableResize</code> property to true, which is used to change the size of the Rich Text Editor dynamically.</p>
</ActionDescription>

<div class="control-section">
    <SfRichTextEditor EnableResize="@Resize">
        <ChildContent>
            <p>Rich Text Editor allows to insert images from online source as well as local computer where you want to insert the image in your content.</p>
            <p><b>Get started Quick Toolbar to click on the image</b></p>
            <p>It is possible to add custom style on the selected image inside the Rich Text Editor through quick toolbar.</p>
            <img alt='Logo' style='width: 300px; height: 300px; transform: rotate(0deg);' src='images/rich-text-editor/rte-image-feather.png' />
            <RichTextEditorToolbarSettings Items="@Tools" />
        </ChildContent>
    </SfRichTextEditor>
</div>

@code{
    private bool Resize = true;

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };
}