@page "/chart/error-bar"
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;

<SampleDescription>
    <p> This sample visualizes the errors in sales distribution of a car for a certain period with error bar in the chart. In property panel, the options are available to change error bar type, drawing mode, and drawing direction of error bar by means of dropdown.</p>
</SampleDescription>
<ActionDescription>
  <p>In this example, you can see how to render and configure the error bar charts. Line type charts are used for cartesian type
     series. You can use error bar by set <code>Visible</code> property to true. You can change the error bar rendering type using
    <code>Type</code> property like fixedValue, percentage, standardDeviation, standardError and custom option of errorBar. To change
    the error bar line length you can use <code>VerticalError</code> property. </p>
   <p> Chart supports the following error bar types.</p>
    <ul>
        <li> <code>Fixed</code> - Renders a fixed type error bar. </li>
        <li><code>Percentage</code> - Renders a percentage type error bar. </li>
        <li> <code>StandardDeviation</code> - Renders a standard deviation type error bar. </li>
        <li> <code>StandardError</code> - Renders a standard error type error bar.  </li>
        <li><code>Custom</code> - Renders a custom type error bar. </li>
    </ul>
   <p>More information on the error bar can be found in this <a target='_blank' href='https://ej2.syncfusion.com/documentation/api/chart/series/#type'>documentation section</a>.</p> 
</ActionDescription>

<div class="control-section">
    <SfChart Title="Sales Distribution of Car by Region" >
        <ChartEvents Load="ChartLoad"/>
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis LabelFormat="{value}%" Minimum="15" Maximum="45">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChartData" Name="Sales" XName="x" YName="y" Type="ChartSeriesType.Scatter">
                <ChartMarker Height="10" Width="10">
                </ChartMarker>
                <ChartErrorBarSettings Visible="true" HorizontalError="3" VerticalError="3"></ChartErrorBarSettings>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartLegendSettings Visible="false"></ChartLegendSettings>
    </SfChart>
</div>

@code{

    public class ErrorBarData
        {
            public string x { get; set; }
            public double y { get; set; }
        }

    public List<ErrorBarData> ChartData = new List<ErrorBarData>
            {
                new ErrorBarData { x= "IND", y= 24 }, 
                new ErrorBarData { x= "AUS", y= 20 }, 
                new ErrorBarData { x= "USA", y= 35 },
                new ErrorBarData { x= "DEU", y= 27 }, 
                new ErrorBarData { x= "ITA", y= 30 },
                new ErrorBarData { x= "UK", y= 41 }, 
                new ErrorBarData { x= "RUS", y= 26 }
            };
            string CurrentUri;

    void ChartLoad(ILoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }
}
