@page "/chart/hilo"
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@using Newtonsoft.Json
@inherits SampleBaseComponent;

<SampleDescription>
   <p>This sample visualizes the AAPL historical data with default HILO series in the chart. Tooltip and crosshair show the information about the data and period. </p> 
</SampleDescription>
<ActionDescription>
   <p> In this example, you can see how to render and configure the Hilo type series. You can use <code>Border</code>, <code>Fill</code> properties to customize the area.Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices. </p>
   <p> More information on the Hilo series can be found in this  <a target='_blank' href='https://ej2.syncfusion.com/documentation/api/chart/series/#type'>documentation section</a>.</p>
</ActionDescription>

<div class="control-section">
    <SfChart Title="AAPL Historical">
        <ChartEvents Load="ChartLoad"/>
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime">
            <ChartAxisCrosshairTooltip Enable="true"></ChartAxisCrosshairTooltip>
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Title="Price" Minimum="10" Maximum="180" Interval="20" LabelFormat="${value}">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartLegendSettings Visible="false"></ChartLegendSettings>
        <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
        <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical">
        </ChartCrosshairSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@StockDetails" Name="Apple Inc" XName="x" High="high" Low="low" Type="ChartSeriesType.Hilo">
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
</div>
@code{
    private ChartData[] StockDetails;
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
        {
            StockDetails = JsonConvert.DeserializeObject<ChartData[]>(System.IO.File.ReadAllText("./wwwroot/data/chart/financial-data.json"));
        });
    }
    public class ChartData
    {
        public DateTime x { get; set; }
        public double high { get; set; }
        public double low { get; set; }
    }

    string CurrentUri;

    void ChartLoad(ILoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }
}

