@page "/Charts/ADIChart"
@using Syncfusion.EJ2.Blazor.Charts
@inject HttpClient Http
@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "AD Indicator";
    SampleBrowser.CurrentControlName = "Chart";
    SampleBrowser.CurrentControlCategory = "Chart";
    SampleBrowser.CurrentControl = SampleBrowser.Config.Chart;
    SampleBrowser.ActionDescription = new string[] {
        @"<p>
        This sample illustrates a stock chart with candle series and an accumulation distribution indicator. Trackball shows the information about the stock and signal value of a day.
    </p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>
         In this example, you can see how to render and configure the Accumulation Distribution Indicator. You can use <code>Border</code>,
            <code>Fill</code> properties to customize the area.
    </p>
    <p>
        Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.
    </p>"
    };
}
@*End:Hidden*@
@if (indicatorData == null)
{
    <div class="stockchartloader"></div>
}
else
{
    <div class="control-section">
        <EjsChart Title="AAPL - 2012-2017">
            <ChartPrimaryXAxis ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.DateTime" Title="months" IntervalType="IntervalType.Months" zoomFactor=0.2 zoomPosition=0.6>
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                <ChartAxisCrosshairTooltip Enable="true"></ChartAxisCrosshairTooltip>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis Title="Price" LabelFormat="${value}" minimum=50
                               maximum=170 plotOffset=25 interval=30 rowIndex=1 opposedPosition=true>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            </ChartPrimaryYAxis>
            <ChartAxes>
                <ChartAxis Name="secondary" opposedPosition=true rowIndex=0 interval=6000000000
                           minimum=-7000000000 maximum=5000000000 Title="Accumulation Distribution">
                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                    @*<ChartStripLines>
                            <ChartStripLine ZIndex="ZIndex.Behind" start="-7000000000" end="6000000000" Text="" Color="#6063ff" Visible="true" Opacity="0.1"></ChartStripLine>
                        </ChartStripLines>*@
                </ChartAxis>
            </ChartAxes>
            <ChartRows>
                <ChartRow Height="40%"></ChartRow>
                <ChartRow Height="60%"></ChartRow>
            </ChartRows>
            <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
            <ChartLegendSettings Visible="false"></ChartLegendSettings>
            <ChartArea>
                <ChartAreaBorder Width="0"></ChartAreaBorder>
            </ChartArea>
            <ChartZoomSettings EnablePinchZooming="true" EnableSelectionZooming="true" Mode="ZoomMode.X"></ChartZoomSettings>
            <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical"></ChartCrosshairSettings>
            <ChartSeriesCollection>
                <ChartSeries DataSource="@indicatorData" xName="x" low="low" high="high" close="close" volume="volume" open="open"
                             Width=2 Name="Apple Inc" Type="ChartSeriesType.Candle" BearFillColor="#2ecd71" BullFillColor="#e74c3d">
                </ChartSeries>
            </ChartSeriesCollection>
            <ChartIndicators>
                <ChartIndicator Type="TechnicalIndicators.AccumulationDistribution" Field="FinancialDataFields.Close" SeriesName="Apple Inc" yAxisName="secondary" Fill="#6063ff" Period=3>
                </ChartIndicator>
            </ChartIndicators>
        </EjsChart>
    </div>
}
@code{
    private ChartData[] indicatorData;
    protected override async Task OnInitAsync()
    {
        indicatorData = await Http.GetJsonAsync<ChartData[]>("scripts/chart/financial-data.json");
    }
    public class ChartData
    {
        public DateTime x { get; set; }
        public double high { get; set; }
        public double low { get; set; }
        public double open { get; set; }
        public double close { get; set; }
        public double volume { get; set; }
    }
}
