@page "/chart/vertical-chart"
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@using System.Collections.ObjectModel;
@inherits SampleBaseComponent;

<SampleDescription>
    <p> This sample illustrates the vertical chart by changing the orientation of x-axis to vertical and y-axis to horizontal.</p>
</SampleDescription>
<ActionDescription>
   <p> In this example, you can see how to render and configure the vertical type charts. To render a chart in vertical manner, you can use isTransposed in chart.</p>
   <p> More information on the vertical chart can be found in this <a target='_blank' href='https://ej2.syncfusion.com/documentation/api/chart/series/#type'>documentation section</a>.</p>
</ActionDescription>

<div class="control-section" align="center">
    <SfChart IsTransposed="true" Title="Indonesia - Seismograph Analysis">
     <ChartEvents Load="ChartLoad"/>
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartPrimaryXAxis Title="Time (s)">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Title="Velocity (m/s)">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChangeData" XName="x" YName="y" Type="ChartSeriesType.Line">
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartTooltipSettings Enable="false"></ChartTooltipSettings>
    </SfChart>
</div>

@code{
    Random random = new Random();
    public ObservableCollection<Data> DataSource;
    public ObservableCollection<Data> ChangeData { get; set; }
    int Count = 0;
    double value = 0;
	
    private static System.Timers.Timer syncTimer;
    public class Data
    {
        public Nullable<double> x { get; set; }
        public Nullable<double> y { get; set; }
    }
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
        {
            DataSource = new ObservableCollection<Data> {
            new Data
            {
                  x = 0,
                  y = random.Next()
            }
        };
        });
        this.Count++;
        ChangeData = this.GetData(0, 50);
        syncTimer = new System.Timers.Timer(500);
        syncTimer.Elapsed += AddNewChartData;
        syncTimer.AutoReset = true;
        syncTimer.Enabled = true;
    }
    ObservableCollection<Data> GetData(int start, int count)
    {
        ObservableCollection<Data> data = new ObservableCollection<Data>();

        for (double i = start; i < start + count; i++)
        {
            value += ((random.Next(0, 10)) - 5);
            data.Add(new Data
            {
                x = i,
                y = random.Next(100, 250)
            });
            this.Count++;
        }
        return data;
    }
    public void AddNewChartData(Object source, System.Timers.ElapsedEventArgs e)
    {
        value += ((random.Next(0, 10)) - 5);
        this.ChangeData.Add(new Data
        {
            x = Count + 10,
            y = random.Next(100, 250)
        });
        Count = Count + 10;
        InvokeAsync(this.StateHasChanged);
    }
string CurrentUri;
    void ChartLoad(ILoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap4") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }
}

