@page "/query-builder/grid"

@using Syncfusion.Blazor.QueryBuilder
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor
@using blazor_samples
@using ej2_blazor_querybuilderdata
@using Newtonsoft.Json.Linq;

@inherits SampleBaseComponent;

<SampleDescription>
    <p>This sample demonstrates the integration of the Data Grid component to showcase data population based on the created filters using the Query Builder component.</p>
</SampleDescription>
<ActionDescription>
   <p>This sample illustrates how to integrate the Data Grid component with the Query Builder.</p>
   <p>The Data Grid component will be refreshed while editing the filters in Query Builder.</p>
   <p>More information about Blazor Query Builder component can be found in this<a target=""_blank"" href=""https://blazor.syncfusion.com/documentation/query-builder/getting-started/"">documentation section</a>.</p>
</ActionDescription>


<div class="col-lg-12 control-section">
    <SfQueryBuilder @ref="Querybuilder" DataSource="@GridData">
        <QueryBuilderRule Condition="or" Rules="@ImportRules"></QueryBuilderRule>
        <QueryBuilderEvents RuleChanged="UpdateRule"></QueryBuilderEvents>
        <QueryBuilderColumns>
            <QueryBuilderColumn Field="TaskID" Label="Task ID" Type="number"></QueryBuilderColumn>
            <QueryBuilderColumn Field="Name" Label="Name" Type="string"></QueryBuilderColumn>
            <QueryBuilderColumn Field="Category" Label="Category" Type="string"></QueryBuilderColumn>
            <QueryBuilderColumn Field="SerialNo" Label="Serial No" Type="string"></QueryBuilderColumn>
            <QueryBuilderColumn Field="InvoiceNo" Label="Invoice No" Type="string"></QueryBuilderColumn>
            <QueryBuilderColumn Field="Status" Label="Status" Type="string"></QueryBuilderColumn>
        </QueryBuilderColumns>
    </SfQueryBuilder>
</div>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid DataSource="@GridData" AllowPaging="true">
                <GridEvents Created="Created" TValue="HardWareDetails"></GridEvents>
                <GridColumns>
                    <GridColumn Field=@nameof(HardWareDetails.TaskID) HeaderText="TaskID" TextAlign="TextAlign.Right" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(HardWareDetails.Name) HeaderText="Name" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(HardWareDetails.Category) HeaderText="Category" TextAlign="TextAlign.Right" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(HardWareDetails.SerialNo) HeaderText="Serial No" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(HardWareDetails.InvoiceNo) HeaderText="Invoice No" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(HardWareDetails.Status) HeaderText="Status" Width="150"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code{
    SfQueryBuilder Querybuilder;
    public IEnumerable<HardWareDetails> GridData { get; set; }
    public IEnumerable<HardWareDetails> FilterData { get; set; }
    public Object QueryData;
    public WhereData FilterQuery;
    public RuleModel GetRule { get; set; }

    protected override void OnInitialized()
    {
        GridData = HardWareDetails.GetAllRecords().AsEnumerable();
        FilterData = HardWareDetails.GetAllRecords().AsEnumerable();
    }

    private async void Created()
    {
        RuleModel Rule = new RuleModel()
        {
            Condition = "or",
            Rules = new List<RuleModel> {
            new RuleModel { Field = "Category", Value = "Laptop", Operator = "equal"  } },

        };
        this.GetRule = await Querybuilder.GetValidRules(Rule);
        this.UpdateRule(new RuleChangeEventArgs() { Name = "", PreviousRule = null, Type = "", Rule = this.GetRule });
    }

    public List<RuleModel> ImportRules = new List<RuleModel>
    {
        new RuleModel { Field = "Category", Value = "Laptop", Operator = "equal" }
    };
    

    private async void UpdateRule(RuleChangeEventArgs args)
    {

        this.QueryData = await Querybuilder.GetFilteredRecords();
        if (this.QueryData != null)
        {
            this.FilterQuery = ((JObject)this.QueryData).ToObject<WhereData>();
            if (this.FilterQuery.Where != null && this.FilterQuery.Where.Count > 0)
            {
                this.GridData = DataOperations.PerformFiltering(this.FilterData, this.FilterQuery.Where, this.FilterQuery.Where[0].Operator).AsEnumerable();
            }
            this.StateHasChanged();
        }
        else
        {
            this.GridData = this.FilterData;
            this.StateHasChanged();
        }
    }


    public class WhereData
    {
        public List<WhereFilter> Where { get; set; }
    }

}

<style>

    .e-grid {
        margin: 0 auto;
    }

    .control-section {
        min-height: auto;
    }
</style>
