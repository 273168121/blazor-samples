@using ej2_blazor_samples
@using ej2_blazor_samples.Shared
@using Newtonsoft.Json
@using Syncfusion.EJ2.Blazor.Lists
@using Syncfusion.EJ2.Blazor.Navigations
@using System.Reflection
@using Microsoft.AspNetCore.Components

@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject IJSRuntime JsRuntime;
@inject SampleService Service;

@typeparam TValue
@*<EjsTreeView ID="components-tree" Fields="@DataSource" CssClass="@treeviewClass" FullRowSelect="true" ExpandOn="@ExpandOnSettings.Click" @ref="ComponentsTree" TValue="SampleListType">
        <TreeViewEvents NodeSelected="OnNodeClick" TValue="SampleListType"></TreeViewEvents>
        <TreeViewTemplates>
            <NodeTemplate>
                <div>
                    <span class="tree-text">@((context as SampleListType).Name)</span>
                    @if ((context as SampleListType).Type != SampleType.None)
                    {
                        <span class="e-badge sb-badge e-samplestatus @((context as SampleListType).Type) tree tree-badge">@((context as SampleListType).Type)</span>
                    }
                </div>
            </NodeTemplate>
        </TreeViewTemplates>
    </EjsTreeView>*@
<CascadingValue Value="@this">
    @*@(await Html.RenderComponentAsync<TreeviewComponent>(RenderMode.ServerPrerendered, new { treeviewClass = @treeviewClass }))*@

    @*<component type="typeof(TreeviewComponent)" render-mode="ServerPrerendered" param-treeviewClass="@treeviewClass" />*@
    <TreeviewComponent treeviewClass="@treeviewClass" @ref="TreeviewObj"></TreeviewComponent>

    <div id="controlSamples" class="time-duration">
        <div id="sb-left-back1" class="back" role="button" tabindex="0" @onclick="@OnToggle">
            <div class="e-icons sb-icons back-icon"></div>
            <div class='control-name'>All Controls</div>
        </div>
        <EjsListView id="sample-list" CssClass="@listClass" DataSource="@ListDataSource" Fields="@ListFields" @ref="SampleList" TValue="object">
            <ListViewEvents Selected="OnSampleSelect" TValue="object"></ListViewEvents>
        </EjsListView>
    </div>
</CascadingValue>
@code {

        EjsListView<object> SampleList;

    public string treeviewClass { get; set; } = "e-view time-duration sb-hide";

    public TreeviewComponent TreeviewObj { get; set; }

    public string listClass { get; set; } = "e-view sb-control-list-top";

    internal List<Sample> ListDataSource { get; set; } = new List<Sample>();

    [CascadingParameter]
    public MainLayout BaseParent { get; set; }

    public void OnToggle()
    {
        TreeviewObj.OnToggle();
    }

    public Sample SampleData
    {
        get
        {
            return Service.Data.CurrentSample;
        }

    }

    public SampleList Control
    {
        get
        {
            return Service.Data.CurrentControl;
        }

    }

    private void OnSampleSelect(Syncfusion.EJ2.Blazor.Lists.SelectEventArgs<object> args)
    {
        if (!Service.Prop.RestricMouseEvents)
        {
            string argsString = JsonConvert.SerializeObject(args);
            ListViewEvent sampleData = JsonConvert.DeserializeObject<ListViewEvent>(argsString, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
            if (UriHelper.Uri.IndexOf("/" + sampleData.data.Url) < 0)
            {
                string compareUrl = string.Empty;
                List<string> ActionDescriptionItems = new List<string>();
                List<string> DescriptionItems = new List<string>();
                if (SampleData.Url != sampleData.data.Url || sampleData.data.Url != compareUrl)
                {
                    compareUrl = SampleData.Url;
                    if (SampleData.ActionDescription != null)
                    {
                        foreach (string Element in SampleData.ActionDescription)
                        {
                            ActionDescriptionItems.Add(Element);
                        }
                        JsRuntime.InvokeAsync<Object>("updateActionDescription", ActionDescriptionItems);
                    }
                    else
                    {
                        JsRuntime.InvokeAsync<Object>("updateActionDescription", new List<string>());
                    }
                    if (SampleData.Description != null)
                    {
                        foreach (string Element in SampleData.Description)
                        {
                            DescriptionItems.Add(Element);
                        }
                        JsRuntime.InvokeAsync<Object>("updateDescription", DescriptionItems);
                    }
                    else
                    {
                        JsRuntime.InvokeAsync<Object>("updateDescription", new List<string>());
                    }
                    this.BaseParent.UpdateBreadCrumb(Control.Name, sampleData.data.Category, sampleData.data.Name);
                    JsRuntime.InvokeAsync<Object>("titleDescription", Control.Name, sampleData.data.Name);  
                    
                    JsRuntime.InvokeAsync<Object>("persistTheme");
                    this.NavigatePage(sampleData.data.Url);
                    SampleBrowser.CurrentUrl = sampleData.data.Url;
                    JsRuntime.InvokeAsync<Object>("destroyControl", new List<string>());
                    JsRuntime.InvokeAsync<Object>("persistURL", SampleData.Url);
                    JsRuntime.InvokeAsync<string>("callResizeEvent");
                }


            }
        }

    }

    public void NavigatePage(string url)
    {
        if (UriHelper.Uri.IndexOf("?") >= 0 && url.IndexOf("?") < 0)
        {
            string[] themeurl = UriHelper.Uri.Split("?");
            url += themeurl.Length > 0 ? "?" + themeurl[themeurl.Length - 1] : string.Empty;
        }
        else if (url.IndexOf("?") < 0)
        {
            url += "?theme=bootstrap4";
        }
        this.BaseParent.SpinnerObj.ShowasTrans();
        UriHelper.NavigateTo(url);
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        UriHelper.LocationChanged += new EventHandler<LocationChangedEventArgs>(this.UrlChange);
    }

    protected void Dispose()
    {
        UriHelper.LocationChanged -= new EventHandler<LocationChangedEventArgs>(this.UrlChange);
    }

    public void UrlChange(object sender, LocationChangedEventArgs args)
    {
        Service.Data.Update(UriHelper);
        if (Service.Data.CurrentControl != null)
        {
            this.UpdateNavMenu();
        }
    }
    protected override void OnAfterRender(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                Service.Data.Update(UriHelper);
                if (Service.Data.CurrentControl != null)
                {
                    this.UpdateNavMenu();
                }
            }
        }
        catch (Exception e)
        {

        }

    }

    public void UpdateNavMenu()
    {
        this.ListDataSource = Control.Samples;
        this.StateHasChanged();
        List<string> ActionDescriptionItems = new List<string>();
        List<string> DescriptionItems = new List<string>();

        this.BaseParent.UpdateBreadCrumb(Control.Name, SampleData.Category, SampleData.Name);
        JsRuntime.InvokeAsync<Object>("titleDescription", Control.Name, SampleData.Name);

        if (SampleData.ActionDescription != null)
        {
            foreach (string Element in SampleData.ActionDescription)
            {
                ActionDescriptionItems.Add(Element);
            }
            JsRuntime.InvokeAsync<Object>("updateActionDescription", ActionDescriptionItems);
        }
        else
        {
            JsRuntime.InvokeAsync<Object>("updateActionDescription", new List<string>());
        }
        if (SampleData.Description != null)
        {
            foreach (string Element in SampleData.Description)
            {
                DescriptionItems.Add(Element);
            }
            JsRuntime.InvokeAsync<Object>("updateDescription", DescriptionItems);
        }
        else
        {
            JsRuntime.InvokeAsync<Object>("updateDescription", new List<string>());
        }

        JsRuntime.InvokeAsync<string>("callResizeEvent");
        //JsRuntime.InvokeAsync<Object>("viewSwitch", this.listClass);
    }

    public void UpdateState()
    {
        this.StateHasChanged();
    }

    Syncfusion.EJ2.Blazor.Lists.ListViewFieldSettings ListFields = new Syncfusion.EJ2.Blazor.Lists.ListViewFieldSettings
    {
        Id = "UID",
        GroupBy = "Category",
        Text = "Name",
        SortBy = "Order"
    };
}
