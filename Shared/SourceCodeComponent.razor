@using System.Text.RegularExpressions;
@using ej2_blazor_samples
@using Syncfusion.EJ2.Blazor.Navigations;
@using Microsoft.AspNetCore.Components;
@inject IJSRuntime JsRuntime;
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper;
@inject SampleService Service;


<div class='sb-source-section'>
    <EjsTab ID='sb-source-tab' Items="@sourceCodeItems" HeaderPlacement="@HeaderPosition.Bottom" @ref="sourceTab">
        <TabEvents Selected="OnSourceClicked"></TabEvents>
    </EjsTab>
</div>


@code {


    public List<TabItem> sourceCodeItems;
    EjsTab sourceTab;

    protected void OnSourceClicked(Syncfusion.EJ2.Blazor.Navigations.SelectEventArgs arg)
    {
        string response = string.Empty;
        this.GetSourceData((int)arg.SelectedIndex);
    }

    public Sample SampleData
    {
        get
        {
            return Service.Data.CurrentSample;
        }

    }

    public SampleList Control
    {
        get
        {
            return Service.Data.CurrentControl;
        }

    }

    protected void GetSourceData(int index)
    {
        InvokeAsync(() =>
        {
            string response = string.Empty;
            string fileName = string.Empty;
            if (SampleData.SourceFiles.Count > index && SampleData.Directory != null)
            {
                fileName = SampleData.SourceFiles[index].FileName;
                try
                {
                    response = System.IO.File.ReadAllText("Pages/" + SampleData.Directory + "/" + SampleData.SourceFiles[index].FileName);
                }
                catch (Exception e)
                {
                    string directory = SampleData.Directory;
                    if (SampleData.Directory.LastIndexOf("/") > 0)
                    {
                        directory = directory.Substring(0, SampleData.Directory.LastIndexOf("/"));
                    }

                    response = System.IO.File.ReadAllText("Pages/" + directory + "/" + SampleData.SourceFiles[index].FileName);
                }

            }
            else
            {
                response = System.IO.File.ReadAllText("Pages/" + SampleData.Directory + "/" + SampleData.FileName);
                fileName = SampleData.FileName;
            }
            response = this.FormatSourceCode(response);
            JsRuntime.InvokeAsync<Object>("refreshTab", response, fileName);
        });


    }

    public string[] sourceResponse { get; set; } = new string[5];

    protected string RemoveString(string comments)
    {
        var StartTag = "@*Hidden:Lines*@";
        int StartIndex = comments.IndexOf(StartTag);
        if (StartIndex > 0)
        {
            var EndTag = "@*End:Hidden*@";
            int EndIndex = comments.IndexOf("@*End:Hidden*@") + EndTag.Length;
            string Content = comments.Substring(StartIndex, EndIndex - StartIndex);
            return comments.Replace(Content, "");
        }
        else
        {
            return comments;
        }
    }

    public string FormatSourceCode(string response)
    {
        response = response.Replace("<", "&lt;");
        response = response.Replace(">", "&gt;");
        while (response.IndexOf("@*Hidden:Lines*@") > -1)
        {
            response = RemoveString(response);
        }
        response = Regex.Replace(response, @"^(?:[\t ]*(?:\r?\n|\r))+", string.Empty, RegexOptions.Multiline);

        return response;
    }

    public void OnSourceTabSelected(Syncfusion.EJ2.Blazor.Navigations.SelectEventArgs arg)
    {
        sourceCodeItems = new List<TabItem>();
        if (arg.SelectedIndex == 1)
        {

            if (SampleData.SourceFiles.Count != 0)
            {
                for (var i = 0; i < SampleData.SourceFiles.Count; i++)
                {
                    sourceCodeItems.Add(
                        new TabItem()
                        {
                            Header = new TabHeader() { Text = SampleData.SourceFiles[i].FileName },
                            ContentTemplate =@<pre class='sb-src-code'><code></code></pre>
                        }
                    );
                }
                this.GetSourceData(0);
                this.StateHasChanged();

            }
            else
            {
                sourceCodeItems = new List<TabItem>() {
                    new TabItem() { Header = new TabHeader() { Text = SampleData.FileName},
                    ContentTemplate = @<pre id='code' class='sb-src-code'><code></code></pre>
                    }
                };
                this.GetSourceData(0);
                this.StateHasChanged();
                    


                }

            }
        }

}