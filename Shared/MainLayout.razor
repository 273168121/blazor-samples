@inherits LayoutComponentBase
@using System.Text.RegularExpressions;
@using Newtonsoft.Json;
@using ej2_blazor_samples
@using Syncfusion.EJ2.Blazor.Navigations;
@using Syncfusion.EJ2.Blazor.SplitButtons;
@using Syncfusion.EJ2.Blazor.DropDowns;
@using Microsoft.AspNetCore.Components;
@using System.Net.Http;
@inject Microsoft.AspNetCore.Components.IUriHelper UriHelper;
@inject HttpClient Http;
@inject IJSRuntime JsRuntime;
<!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->
<div hiddenid="sync-analytics" data-queue="EJ2 - ASP.NET Core Blazor - Demos"></div>
<div class="sample-browser e-view">
    <div class="sb-mobile-overlay sb-hide"></div>
    <div id='sample-header' class="sb-header e-view" role="banner">
        <div class='sb-header-left sb-left sb-table'>
            <div class='sb-header-item sb-table-cell'>
                <div id="sb-toggle-left" @onclick="@toggleClick" role="button" tabindex="0" class="sb-slide-nav sb-icons toggle-active sb-icon-Hamburger" aria-label="toggle all controls navigation"
                     title='toggle leftpane'></div>
            </div>
            <div class='sb-header-item sb-table-cell' id="sb-header-text" style="padding-left:20px">
                <span>Essential JS 2 for ASP.NET Core </span>
                <EjsDropDownButton id="platform-switch" Content="Blazor" Items="@items"></EjsDropDownButton>
            </div>
            <div class='sb-header-item sb-table-cell'>
                <div>
                    <img src='styles/images/Preview-label.svg'>
                </div>
            </div>


        </div>
        <div class='sb-header-right sb-right sb-table'>
            <div class="sb-header-item sb-table-cell">
                <div id="header-theme-switcher" role="button" tabindex="0" title='Change theme of sample browser'>
                    <!-- <EjsDropDownList ref="@dropdownlist" Created="@created" ID="games" Index="0" PopupHeight="220px" fields="@dropDownFields" Change="@OnChange" placeholder="SELECT THEME" CssClass="e-textbox right" DataSource="@themes"></EjsDropDownList> -->
                    <EjsMenu ID='theme-menu' created="@OnThemeOpen" Items='@menuItems' ItemSelected="@OnChange"></EjsMenu>
                </div>
            </div>
            @*<div class='sb-header-item sb-table-cell sb-search-wrapper'>
                    <div class='sb-search-btn' id='sb-trigger-search' role="button" tabindex="0" aria-label="toggle sample search" title="Toggle sample search">
                        <span class='sb-settings sb-icons sb-icon-Search'></span>
                    </div>
                </div>*@
            <!-- <div class='sb-header-item sb-table-cell sb-settings-wrapper'>
                <div class='sb-setting-btn' role="button" tabindex="0" aria-label="toggle settings menu" tabindex="">
                    <span class='sb-settings sb-icons sb-icon-Settings-Preferences'></span>
                </div>
            </div> -->
            <!-- <div class="sb-header-item sb-table-cell  sb-header-settings sb-icons"></div>
            <div class="sb-header-splitter sb-download-splitter"></div> -->
            <div class='sb-header-item sb-table-cell sb-download-wrapper'>
                <a href='https://github.com/syncfusion/ej2-aspnet-core-razor-components-samples/' target="_blank">
                    <button id='github' class='sb-github-btn'>
                        <div class="github-image">
                            <img src='styles/images/mark.svg'>
                        </div>
                    </button>
                </a>
            </div>
        </div>
    </div>

    <div class="sb-content e-view">
        <EjsSidebar ID="left-sidebar" @ref="@sidebar" EnableGestures="false" Target=".sb-content">
            <ChildContent>
                <div class='sb-left-pane e-view'>
                    <div class="sb-left-pane-header">
                        <div class="sb-header-top">
                            <div class="sb-ej2">
                                <div class="sb-mobile-logo"></div>
                                <div class="sb-name">Essential JS 2</div>
                            </div>
                        </div>
                    </div>
                    <div class="sb-home" @onclick="document.getElementById('sb-home').click()">
                        <div class="sb-home-link sb-icons sb-icon-Home"></div>
                        <div class="sb-home-text">
                            <span>HOME</span>
                        </div>
                        <a id="sb-home" href="https://ej2.syncfusion.com/home/aspnet-core-razor-components.html"></a>
                    </div>

                    <div class='sb-control-navigation e-view'>
                        <NavMenu></NavMenu>
                    </div>
                    <div class='sb-left-footer'>
                        <div class="sb-mobile-header-buttons">
                            <a href='https://www.syncfusion.com/aspnet-core-ui-controls' target="_blank">
                                <div class="sb-mobile-header-about">
                                    About
                                </div>
                            </a>
                            <a href='https://www.syncfusion.com/downloads/aspnetcore-js2' target="_blank">
                                <div class="sb-mobile-header-price">Pricing</div>
                            </a>
                        </div>
                        <div class='sb-left-footer-links'>
                        </div>
                    </div>
                </div>
            </ChildContent>
        </EjsSidebar>
        <div class='sb-right-pane e-view' id='right-pane'>
            <div class="sb-content-overlay">
                <div class="sb-loading sb-hide">
                    <svg class="circular" height="40" width="40">
                        <circle class="path" cx="25" cy="25" r="20" fill="none" stroke-width="6" stroke-miterlimit="10" />
                    </svg>
                </div>
            </div>
            <div class='sb-desktop-wrapper'>
                <div id='component-name' role='header' class='sb-component-name sb-rightpane-padding'>
                    <h1 class='sb-sample-text'>@ControlName</h1>
                </div>
                <div id='sample-bread-crumb' class='sb-bread-crumb sb-rightpane-padding'>
                    <div class='sb-bread-crumb-text'></div>
                </div>
                <div class='sb-action-description sb-rightpane-padding'>
                </div>
                <EjsTab CssClass='sb-content-tab' id='content-tab' selected="@onSourceTabSelected">
                    <div id="sb-content" class='sb-content-section'>
                        <div id='sb-content-header' class="e-tab-header sb-content-tab-header">
                            <div>
                                <span class="sb-icons sb-icon-Demo"></span><span class="sb-tab-title"> DEMO </span>
                            </div>
                            <div>
                                <span class="sb-icons sb-icon-Code"></span><span class="sb-tab-title">  SOURCE </span>
                            </div>
                        </div>
                        <div class="e-content sb-sample-content-area">
                            <div>
                                <div class='sb-demo-section'>
                                    <div class="control-fluid">
                                        <div class="container-fluid">
                                            <div id="control-content">
                                                @Body
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <div class='sb-source-section'>
                                    <EjsTab id='sb-source-tab' items="@sources" headerPlacement="@HeaderPosition.Bottom" @ref="sourceTab"></EjsTab>
                                </div>
                            </div>
                        </div>
                    </div>
                </EjsTab>
                <div class='description-section sb-rightpane-padding'>

                </div>
                <div class="sb-footer">
                    <div class="sb-footer-left">
                        <div class="sb-footer-links">
                            <a href="https://ej2.syncfusion.com/aspnet-core-blazor/documentation/" target="_blank">
                                <div class="sb-footer-link">Documentation</div>
                            </a>
                            <a href="https://www.syncfusion.com/forums/" target="_blank">
                                <div class="sb-footer-link">Forum</div>
                            </a>
                            <a href="https://blog.syncfusion.com/" target="_blank">
                                <div class="sb-footer-link">Blog</div>
                            </a>
                            <a href="https://www.syncfusion.com/kb" target="_blank">
                                <div class="sb-footer-link">Knowledge Base</div>
                            </a>
                        </div>
                        <div class="sb-footer-copyright">Copyright &copy; 2001-2019 Syncfusion Inc.</div>
                    </div>
                    <div class="sb-footer-logo">
                        <a href="https://www.syncfusion.com/" target="_blank">
                            <div class="sb-footer-logo-icon"></div>
                        </a>
                    </div>
                </div>
            </div>
        </div>
        <div class="sb-body-overlay sb-hide">
            <div class="sb-loading">
                <svg class="circular" height="40" width="40">
                    <circle class="path" cx="25" cy="25" r="20" fill="none" stroke-width="6" stroke-miterlimit="10" />
                </svg>
            </div>
        </div>
        <div class="e-search-overlay sb-hide">
            <div class='sb-search-input' id='search-input-wrapper' data-value=''>
                <input type='text' aria-required="true" id='search-input' onkeyup='this.parentElement.setAttribute("data-value",this.value)' class='e-icons' placeholder="Search here..." aria-label="search samples" />
                <span class='e-icons sb-reset-icon'></span>
                <span class='e-icons  sb-search-icon'></span>
            </div>
            <div id='search-popup' class='sb-search-result'></div>
        </div>
        <div class='sb-mobilefooter e-view sample-navigation' id='mobile-footer'>
            <button id='mobile-prev-sample' class="sb-navigation-prev sb-left" @onclick="@prevSample" aria-label="previous sample">
                PREVIOUS
            </button>
            <button id='mobile-next-sample' class="sb-navigation-next sb-right" @onclick="@nextSample" aria-label="next sample">
                NEXT
            </button>
        </div>
    </div>
</div>

@code {

    EjsTab sourceTab;
    EjsSidebar sidebar;
    EjsToolbar popup;
    EjsDropDownList dropdownlist;
    [Parameter]
    public string ControlName { get; set; } = "ControlName";
    public OverflowMode overflowmode { get; set; } = OverflowMode.Popup;

    [Parameter]
    private string theme { get; set; }

    List<object> themes = new List<object>
    {
        new { id= "Theme1", text= "Material" },
        new { id= "Theme2", text= "Fabric" },
        new { id= "Theme3", text= "Bootstrap" },
        new { id= "Theme4", text= "HighContrast" },
        new { id= "Theme5", text= "BootstrapV4" },
    };
    List<object> menuItems = new List<object>
    {
        new { text = "CHOOSE THEME",
            items = new List<object>
            {
                new { id= "Theme1", text= "Material" },
                new { id= "Theme2", text= "Fabric"},
                new { id= "Theme3", text= "Bootstrap" },
                new { id= "Theme4", text= "High Contrast" },
                new { id= "Theme5", text= "Bootstrap V4" },
            }
        }
    };

    public object dropDownFields = new
    {
        text = "text",
        value = "id"
    };

    private void prevSample(object e)
    {
        int curIndex = SampleBrowser.SampleUrls.IndexOf(SampleBrowser.CurrentUrl);
        UriHelper.NavigateTo(SampleBrowser.SampleUrls[curIndex - 1].ToString());
        SampleBrowser.CurrentUrl = SampleBrowser.SampleUrls[curIndex - 1].ToString();
    }

    private void nextSample(object e)
    {
        int curIndex = SampleBrowser.SampleUrls.IndexOf(SampleBrowser.CurrentUrl);
        UriHelper.NavigateTo(SampleBrowser.SampleUrls[curIndex + 1].ToString());
        SampleBrowser.CurrentUrl = SampleBrowser.SampleUrls[curIndex + 1].ToString();
    }

    private object AccountMenuItems { get; set; } = new List<object>
    {
        new {
            text = "Essential JS2 for Blazor Components",
            showtecton= "overflow"
        }
    };

    public List<Syncfusion.EJ2.Blazor.SplitButtons.ItemModel> items { get; set; } = new List<Syncfusion.EJ2.Blazor.SplitButtons.ItemModel>
    {
        new Syncfusion.EJ2.Blazor.SplitButtons.ItemModel{ Text = "JavaScript", Url="https://ej2.syncfusion.com/demos/" },
        new Syncfusion.EJ2.Blazor.SplitButtons.ItemModel{ Text = "JavaScript (ES5)", Url="https://ej2.syncfusion.com/javascript/demos/" },
        new Syncfusion.EJ2.Blazor.SplitButtons.ItemModel { Text = "React", Url="https://ej2.syncfusion.com/react/demos/" },
        new Syncfusion.EJ2.Blazor.SplitButtons.ItemModel { Text = "Angular", Url="https://ej2.syncfusion.com/angular/demos/" },
        new Syncfusion.EJ2.Blazor.SplitButtons.ItemModel { Text = "ASP.NET Core", Url="https://ej2.syncfusion.com/aspnetcore/" },
        new Syncfusion.EJ2.Blazor.SplitButtons.ItemModel { Text = "ASP.NET MVC", Url="https://ej2.syncfusion.com/aspnetmvc/" },
        new Syncfusion.EJ2.Blazor.SplitButtons.ItemModel { Text = "Vue", Url="https://ej2.syncfusion.com/vue/demos/" }
    };

    public List<object> items2 { get; set; } = new List<object>
    {
        new { text = "Material", iconCss ="sb-icons" },
        new { text = "Fabric", iconCss ="sb-icons" },
        new { text = "Bootstrap", iconCss ="sb-icons" },
        new { text = "HighContrast", iconCss ="sb-icons" },
        new { text = "BootstrapV4", iconCss ="sb-icons" }
    };

    public List<TabItem> sources;

    void onButtonClick()
    {
        this.ControlName = SampleBrowser.CurrentSampleName;
    }

    public void toggleClick(object args)
    {
        JsRuntime.InvokeAsync<string>("callResizeEvent");
        this.sidebar.Toggle();
    }

    protected void OnChange(Syncfusion.EJ2.Blazor.Navigations.MenuEventArgs args)
    {
        JsRuntime.InvokeAsync<Object>("switchTheme", this.theme);
        JsRuntime.InvokeAsync<Object>("tickTheme", this.theme);
    }

    protected void OnThemeOpen(object args)
    {
        JsRuntime.InvokeAsync<Object>("getTheme", args);
    }

    protected override bool ShouldRender()
    {
        return true;
    }

    protected string RemoveString(string s)
    {
        var startTag = "@*Hidden:Lines*@";
        int startIndex = s.IndexOf(startTag);
        if (startIndex > 0)
        {
            var endTag = "@*End:Hidden*@";
            int endIndex = s.IndexOf("@*End:Hidden*@") + endTag.Length;
            string temp = s.Substring(startIndex, endIndex - startIndex);
            return s.Replace(temp, "");
        }
        else
        {
            return s;
        }
    }
        
    protected void onSourceTabSelected(Syncfusion.EJ2.Blazor.Navigations.SelectEventArgs arg)
    {
        sources = new List<TabItem>();
        if (arg.SelectedIndex == 1)
        {
            SampleBrowser.CurrentControl.ForEach(async (s) =>
            {
                if (s.Name == SampleBrowser.CurrentSampleName)
                {
                String response = await Http.GetStringAsync("./scripts/Pages/" + s.Directory + "/" + s.FileName + ".txt");
                    response = response.Replace("<", "&lt;");
                    response = response.Replace(">", "&gt;");
                    response = RemoveString(response);
                    sources = new List<TabItem>(){
                                          new TabItem() { Header = new TabHeader() { Text = s.FileName }, Content = "<pre id='code' class='sb-src-code'><code>" + response + "</code></pre>" }};
                    this.sourceTab.Items = sources;
                    this.sourceTab.DataBind();
                    JsRuntime.InvokeAsync<Object>("refreshTab", response);
                }
            });
        }       
    }

    protected override void OnAfterRender()
    {
        if (this.ControlName != SampleBrowser.CurrentSampleName)
        {
            string[] paths = new string[3];
            int i = 0;
            paths[i] = SampleBrowser.CurrentControlName;
            i++;
            if (SampleBrowser.CurrentControlCategory != SampleBrowser.CurrentControlName)
            {
                paths[i] = SampleBrowser.CurrentControlCategory;
                i++;
            }
            paths[i] = SampleBrowser.CurrentSampleName;
            this.ControlName = SampleBrowser.CurrentControlName;
            JsRuntime.InvokeAsync<Object>("updateBreadCrumb", new String[] { this.ControlName }, paths);
            List<string> ls = new List<string>();
            List<string> ls1 = new List<string>();
            if (SampleBrowser.ActionDescription != null)
            {
                foreach (string element1 in SampleBrowser.ActionDescription)
                {
                    ls.Add(element1);
                }
                JsRuntime.InvokeAsync<Object>("updateActionDescription", ls);
            }
            else
            {
                JsRuntime.InvokeAsync<Object>("updateActionDescription", new List<string>());
            }
            if (SampleBrowser.Description != null)
            {
                foreach (string element in SampleBrowser.Description)
                {
                    ls1.Add(element);
                }
                JsRuntime.InvokeAsync<Object>("updateDescription", ls1);
            }
        }
    }
}
