
@using Syncfusion.Blazor;
@using Syncfusion.Blazor.DropDowns;
@using Microsoft.AspNetCore.Components;

@inject IJSRuntime JsRuntime;
@inject NavigationManager UriHelper;
@inject SampleService SampleService;

@inherits LayoutComponentBase;

<CascadingValue Value="@this">
    <SpinnerComponent @ref="spinnerRef"></SpinnerComponent>
    @*Set empty layout to home page and components which have open in new window functionality.*@
    @{ 
        SampleService.Update(UriHelper);
        var isEmptyLayout = SampleService.SampleInfo != null && !UriHelper.Uri.Contains(SampleService.SampleInfo.Url) && SampleService.SampleInfo.MappingSampleName != null;
    }
    @if (UriHelper.BaseUri == UriHelper.Uri || isEmptyLayout)
    {
        @Body
    }
    else
    {
        <div class="sample-browser e-view sf-new" @onclick="OnAppClick">
            <div class="sb-mobile-overlay sb-hide"></div>
            <HeaderComponent OnToggleClick="@OnToggleClick" OnRightToggleClick="@OnRightToggleClick"></HeaderComponent>
            <div class="sb-content e-view">
                <LeftPaneComponent @ref="LeftPaneRef"></LeftPaneComponent>
                <RightPaneComponent @ref="RightPaneRef">@Body</RightPaneComponent>
                @if (SampleService.IsDevice)
                {
                    <SideBarComponent IsExpanded="@rightSidebarExpanded" Position="SidebarPlacement.Right">
                        <div class="sb-left-pane-header">
                            <div class="sb-setting-header">Preferences</div>
                        </div>
                        <div class="sb-setting-item sb-setting-theme-section">
                            <div class="sb-icons sb-setting-icons sb-icon-palette"></div>
                            <div class="sb-setting-text">Theme Selection</div>
                            @{
                                List<DropDownData> themeData = new ThemeSwitcher().GetThemeData();
                            }
                            <SfDropDownList ID="mobileTheme" TValue="string" Index="3" TItem="DropDownData" PopupWidth="180px" DataSource="@themeData">
                                <DropDownListEvents ValueChange="OnThemeChange" TValue="string"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Text" Value="ID"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                        <div class='sb-setting-item sb-setting-culture'>
                            <div class='setting-label'>
                                <div class='sb-icons sb-setting-icons sb-icon-localization'></div>
                                <div class='sb-setting-text'>Localization</div>
                            </div>
                            <div>
                                <CultureSwitcher />
                            </div>
                        </div>
                    </SideBarComponent>
                    <SampleNavigator @ref="SampleNavigatorRef"></SampleNavigator>
                }
            </div>
        </div>
    }
</CascadingValue>

@code {
    [Inject]
    protected SyncfusionBlazorService SyncfusionService { get; set; }

    private bool rightSidebarExpanded { get; set; }
    private SpinnerComponent spinnerRef { get; set; }
    private string rightPaneClass = SampleUtils.RIGHT_PANE;

    /// <summary>
    /// LeftPane reference for outside usage.
    /// </summary>
    public LeftPaneComponent LeftPaneRef { get; set; }
    /// <summary>
    /// RightPane reference for outside usage.
    /// </summary>
    public RightPaneComponent RightPaneRef { get; set; }

    /// <summary>
    /// SampleNavigator reference for outside usage.
    /// </summary>
    public SampleNavigator SampleNavigatorRef { get; set; }

    // Theme switcher handler for devices
    private void OnThemeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        var currentTheme = SampleUtils.GetThemeName(UriHelper.Uri);
        if (currentTheme != args.Value)
        {
            var url = SampleUtils.GetThemeUrl(UriHelper.Uri, args.Value);
            UriHelper.NavigateTo(url, true);
        }
    }

    // Left sidebar click handler
    private async Task OnToggleClick()
    {
        // Update left sidebar expand and collapse status
        this.LeftPaneRef.UpdateExpandedState();
        // Collapse right sidebar if it is expanded
        if (SampleService.IsDevice && rightSidebarExpanded)
        {
            rightSidebarExpanded = !rightSidebarExpanded;
        }
        await JsRuntime.InvokeAsync<string>("callResizeEvent");
    }

    // Right sidebar click handler
    private void OnRightToggleClick()
    {
        // Update right sidebar expand and collapse status
        rightSidebarExpanded = !rightSidebarExpanded;
        // Collapse left sidebar if it is expanded
        if (LeftPaneRef.IsExpanded())
        {
            LeftPaneRef.UpdateExpandedState();
        }
    }

    // App click handler for collapse the sidebar components in device rendering.
    private void OnAppClick()
    {
        this.CollapseSideBar();
    }

    /// <summary>
    /// Collapse both right and left sidebar component.
    /// </summary>
    public void CollapseSideBar()
    {
        if (SampleService.IsDevice)
        {
            // Collapse left sidebar if it is expanded on document click
            if (LeftPaneRef.IsExpanded())
            {
                LeftPaneRef.UpdateExpandedState();
            }
            // Collapse right sidebar if it is expanded on document click
            if (rightSidebarExpanded)
            {
                rightSidebarExpanded = !rightSidebarExpanded;
            }
        }
    }

    /// <summary>
    /// Update BreadCrumb component with current sample details.
    /// </summary>
    /// <param name="componentName">Specifies the current component name.</param>
    /// <param name="category">Specifies the current sample category name.</param>
    /// <param name="sampleName">Specifies the current sample name.</param>
    public void UpdateBreadCrumb(string componentName, string category, string sampleName)
    {
        this.RightPaneRef.BreadCrumbRef?.Refresh(componentName, category, sampleName);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        // Enable ripple effect to the material theme.
        if (UriHelper.Uri.IndexOf("material") > 0)
        {
            SyncfusionService.EnableRipple();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            // Add Spinner ref to the sample servie to get access in SampleBaseComponent class.
            if (SampleService.Spinner == null)
            {
                SampleService.Spinner = spinnerRef;
            }

            // Get device information for mobile sidebar rendering
            this.SampleService.IsDevice = await this.JsRuntime.InvokeAsync<bool>("sfBlazor.isDevice");
            if (this.SampleService.IsDevice && (UriHelper.Uri != UriHelper.BaseUri))
            {
                LeftPaneRef?.UpdateExpandedState();
                StateHasChanged();
            }
        }
        else
        {
            // Refresh meta data for home page navigation.
            if (UriHelper.BaseUri == UriHelper.Uri)
            {
                SampleService.MetaData?.Refresh();
            }
        }
        if (!this.SampleService.IsDevice)
        {
            // Render sample navigator in the right pane for desktop.
            RightPaneRef?.SampleNavigatorRef.Rerender(SampleService.IsDevice);
        }
    }
}

